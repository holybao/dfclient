{"version":3,"file":"bundle-37d99c2bb4a5fc7a01d5.min.js","mappings":"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EAAI,IAChC,GAAIqH,EAAS,IAAElF,KAAU,OAAU,MAAI2D,UAAYmB,EACjD,OAAOI,EAAS,IAAElF,KAAQ,GAG9B,OAAOA,YAOR,KAFU,EAAF,WACP,MAAO,CAAEiB,SAAAA,EAAUrB,iBAAAA,IACpB,QAFM,OAEN,aA1sBL,GAotBA,MAAOuF,GACPC,QAAQC,IAAI,syBCzvBd,gBAaE,wEAbO,EAAAvG,YAcP,4EAdiB,EAAA1B,gBACnB,gBAcE,wEAdO,EAAA6D,YACT,mBAIE,EAAAqE,SAJK,UASL,0EATiB,EAAAC,cAUjB,gFAV6B,EAAAC,oBAC/B,gBAOE,6DAAAC,IAAA,kBAPO,EAAAC,uBAaP,gFAb2C,EAAAC,oBAK3C,sEAL6D,EAAAC,UAM7D,oEANqE,EAAA5H,6PC7BvE,mBAEa,EAAA6H,GAAI,aACf,iFAGF,MAAMC,EAAI,CACR,IACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,8EACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,8EACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,+EACA,8EACA,gFACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,8EACA,gFACA,+EACA,gFACA,8EACA,+EACA,gFACA,gFACA,gFACA,gFACA,gFACA,+EACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,+EACA,8EACA,gFACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,+EACA,6EACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,+EACA,+EACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,8EACA,+EACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,8EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,8EACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,8EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,8EACA,8EACA,gFACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,gFACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,+EACA,+EACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,+EACA,+EACA,gFACA,gFACA,+EACA,gFACA,+EACA,gFACA,+EACA,gFACA,gFACA,+EACA,+EACA,gFACA,+EACA,gFACA,gFACA,gFACA,8EACA,gFACA,+EACA,KACAzH,KAAKM,IAAM,aAAOA,KAEpB,MAAMoH,EAMJC,YAAYC,EAAgBC,GAC1BlG,KAAKmG,GAAI,aAAO,GAChBnG,KAAKhB,GAAI,aAAO,GAChBgB,KAAKiG,OAASA,EACdjG,KAAKkG,EAAIA,EAGXE,OAAOC,GACLrG,KAAKmG,EAAInG,KAAKmG,EAAEzD,IAAI2D,GAAKtD,IAAI,EAAA8C,GAG/BS,MACE,IAAK,IAAIzI,EAAI,EAAGA,EAAImC,KAAKiG,OAAS,EAAGpI,IAAK,CACxC,MACM0I,EADIvG,KAAKkG,EAAExD,IAAI1C,KAAKmG,GAAGzD,IAAIoD,EAAEjI,IAAIkF,IAAI,EAAA8C,GAC5BW,OAAO,EAAG,EAAAX,GAAGnD,IAAI1C,KAAKhB,GAAG+D,IAAI,EAAA8C,GAC5C7F,KAAKhB,EAAIgB,KAAKmG,EACdnG,KAAKmG,EAAII,EAEX,MAAMlD,EAAIrD,KAAKkG,EAAExD,IAAI1C,KAAKmG,GAAGpD,IAAI,EAAA8C,GACjC7F,KAAKhB,EAAIqE,EAAEmD,OAAO,EAAG,EAAAX,GAAGnD,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","sources":["webpack://client/../node_modules/@darkforest_eth/hashing/src/fakeHash.ts","webpack://client/../node_modules/@darkforest_eth/hashing/dist/fractions/bigFraction.js","webpack://client/../node_modules/@darkforest_eth/hashing/src/index.ts","webpack://client/../node_modules/@darkforest_eth/hashing/src/mimc.ts","webpack://client/../node_modules/@darkforest_eth/hashing/src/perlin.ts","webpack://client/../node_modules/@darkforest_eth/types/src/arrival.ts","webpack://client/../node_modules/@darkforest_eth/types/src/artifact.ts","webpack://client/../node_modules/@darkforest_eth/types/src/game_types.ts","webpack://client/../node_modules/@darkforest_eth/types/src/hat.ts","webpack://client/../node_modules/@darkforest_eth/types/src/index.ts","webpack://client/../node_modules/@darkforest_eth/types/src/modal.ts","webpack://client/../node_modules/@darkforest_eth/types/src/planet.ts","webpack://client/../node_modules/@darkforest_eth/types/src/planetmessage.ts","webpack://client/../node_modules/@darkforest_eth/types/src/renderer.ts","webpack://client/../node_modules/@darkforest_eth/types/src/setting.ts","webpack://client/../node_modules/@darkforest_eth/types/src/upgrade.ts","webpack://client/../node_modules/big-integer/BigInteger.js"],"sourcesContent":["import bigInt from 'big-integer';\n\n/**\n * Generate a random number based on some seed. Useful for procedural generation.\n *\n * @param seed The seed of the random number.\n */\nexport function seededRandom(seed: number) {\n  const x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\n\ntype IdxWithRand = {\n  idx: number;\n  rand: number;\n};\n\nconst SIZE = 65536; // we permute 256x256 grids of 256x256 mega-chunks\nlet globalSeed = 1;\n\nconst globalRandom = () => {\n  return seededRandom(globalSeed++);\n};\n\nconst arr: IdxWithRand[] = [];\nfor (let i = 0; i < SIZE; i += 1) {\n  arr.push({\n    idx: i,\n    rand: globalRandom(),\n  });\n}\narr.sort((a, b) => a.rand - b.rand);\nconst lookup = arr.map((a) => a.idx);\nconst lookupInv = Array(SIZE).fill(0);\nfor (let i = 0; i < SIZE; i += 1) {\n  lookupInv[lookup[i]] = i;\n}\n\n// return the number in [0, n) congruent to m (mod n)\nconst posMod = (m: number, n: number) => {\n  const val = Math.floor(m / n) * n;\n  return m - val;\n};\n\n// permutation by lookup table\nconst sigma = (x: number, y: number) => {\n  const val = 256 * x + y;\n  const idx = posMod(val, SIZE);\n  const ret: [number, number] = [Math.floor(lookup[idx] / 256), lookup[idx] % 256];\n  return ret;\n};\n\n// cyclic permutation\nconst cyc = (m: number, n: number) => (r: number, s: number) => {\n  const val = posMod(256 * (r + m) + (s + n), SIZE);\n  const ret: [number, number] = [Math.floor(val / 256), val % 256];\n  return ret;\n};\n\n// 4/65536 in a 256x256 square are valid planets\n// then generate the rest of the string pseudorandomly\n/**\n * @hidden\n */\nexport const fakeHash = (planetRarity: number) => (x: number, y: number) => {\n  const m = Math.floor(x / 256);\n  const r = x - m * 256;\n  const n = Math.floor(y / 256);\n  const s = y - n * 256;\n  const [mPrime, nPrime] = sigma(m, n);\n  const [xPrime, yPrime] = sigma(...cyc(mPrime, nPrime)(...sigma(r, s)));\n  const validPlanet = xPrime * 256 + yPrime < (256 * 256) / planetRarity;\n  // first four bytes\n  let hash = validPlanet ? '00000000' : '1eadbeef';\n  // next 28 bytes, generated 4 at a time. deterministically generated from x, y\n  const seed = 8 * (10000000 * x + y);\n  for (let i = 0; i < 7; i += 1) {\n    const rand = Math.floor(seededRandom(seed + i) * 2 ** 32);\n    let append = rand.toString(16);\n    while (append.length < 8) {\n      append = '0' + append;\n    }\n    hash += append;\n  }\n  return bigInt(hash, 16);\n};\n","/* eslint-disable */\n\n/**\n * @license Fraction.js v4.0.12 09/09/2015\n * http://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2015, Robert Eisele (robert@xarg.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <nominator>, 1 => <denominator> ]\n * [ n => <nominator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * let f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\nfunction errorConstructor() {\n  const temp = Error.apply(this, arguments);\n  temp['name'] = this['name'] = name;\n  this['stack'] = temp['stack'];\n  this['message'] = temp['message'];\n}\n\nfunction Fraction(a, b) {\n  if (!(this instanceof Fraction)) {\n    return new Fraction(a, b);\n  }\n\n  parse(a, b);\n\n  a = gcd(P['d'], P['n']); // Abuse a\n\n  this['s'] = P['s'];\n  this['n'] = (P['n'] / a) | C_ZERO;\n  this['d'] = (P['d'] / a) | C_ZERO;\n}\n\ntry {\n  (function (root) {\n    'use strict';\n\n    // Set Identity function to downgrade BigInt to Number if needed\n    if (!BigInt)\n      BigInt = function (n) {\n        return n;\n      };\n\n    const C_ONE = BigInt(1);\n    const C_ZERO = BigInt(0);\n    const C_TEN = BigInt(10);\n    const C_TWO = BigInt(2);\n    const C_FIVE = BigInt(5);\n\n    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n    const MAX_CYCLE_LEN = BigInt(2000);\n\n    // Parsed data to avoid calling \"new\" all the time\n    const P = {\n      s: C_ONE,\n      n: C_ZERO,\n      d: C_ONE,\n    };\n\n    function createError(name) {\n      /**\n       * Error constructor\n       *\n       * @constructor\n       */\n      function IntermediateInheritor() {}\n      IntermediateInheritor.prototype = Error.prototype;\n      errorConstructor.prototype = new IntermediateInheritor();\n\n      return errorConstructor;\n    }\n\n    const DivisionByZero = (Fraction['DivisionByZero'] = createError('DivisionByZero'));\n    const InvalidParameter = (Fraction['InvalidParameter'] = createError('InvalidParameter'));\n\n    function assign(n, s) {\n      try {\n        n = BigInt(n);\n      } catch (e) {\n        throw new InvalidParameter();\n      }\n\n      return n * s;\n    }\n\n    const parse = function (p1, p2) {\n      let n = C_ZERO,\n        d = C_ONE,\n        s = C_ONE;\n\n      if (p1 === undefined || p1 === null) {\n        /* void */\n      } else if (p2 !== undefined) {\n        n = BigInt(p1);\n        d = BigInt(p2);\n        s = n * d;\n      } else if (typeof p1 === 'object') {\n        if ('d' in p1 && 'n' in p1) {\n          n = BigInt(p1['n']);\n          d = BigInt(p1['d']);\n          if ('s' in p1) n *= BigInt(p1['s']);\n        } else if (0 in p1) {\n          n = BigInt(p1[0]);\n          if (1 in p1) d = BigInt(p1[1]);\n        } else if (p1 instanceof BigInt) {\n          n = BigInt(p1);\n        } else {\n          throw new InvalidParameter();\n        }\n        s = n * d;\n      } else if (typeof p1 === 'number') {\n        if (isNaN(p1)) {\n          throw new InvalidParameter();\n        }\n\n        if (p1 < 0) {\n          s = -C_ONE;\n          p1 = -p1;\n        }\n\n        if (p1 % 1 === 0) {\n          n = BigInt(p1);\n        } else if (p1 > 0) {\n          // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n          let z = 1;\n\n          let A = 0,\n            B = 1;\n          let C = 1,\n            D = 1;\n\n          let N = 10000000;\n\n          if (p1 >= 1) {\n            z = 10 ** Math.floor(1 + Math.log10(p1));\n            p1 /= z;\n          }\n\n          // Using Farey Sequences\n\n          while (B <= N && D <= N) {\n            let M = (A + C) / (B + D);\n\n            if (p1 === M) {\n              if (B + D <= N) {\n                n = A + C;\n                d = B + D;\n              } else if (D > B) {\n                n = C;\n                d = D;\n              } else {\n                n = A;\n                d = B;\n              }\n              break;\n            } else {\n              if (p1 > M) {\n                A += C;\n                B += D;\n              } else {\n                C += A;\n                D += B;\n              }\n\n              if (B > N) {\n                n = C;\n                d = D;\n              } else {\n                n = A;\n                d = B;\n              }\n            }\n          }\n          n = BigInt(n) * BigInt(z);\n          d = BigInt(d);\n        } else if (isNaN(p1)) {\n          d = n = NaN;\n        }\n      } else if (typeof p1 === 'string') {\n        let ndx = 0;\n\n        let v = C_ZERO,\n          w = C_ZERO,\n          x = C_ZERO,\n          y = C_ONE,\n          z = C_ONE;\n\n        let match = p1.match(/\\d+|./g);\n\n        if (match === null) throw new InvalidParameter();\n\n        if (match[ndx] === '-') {\n          // Check for minus sign at the beginning\n          s = -C_ONE;\n          ndx++;\n        } else if (match[ndx] === '+') {\n          // Check for plus sign at the beginning\n          ndx++;\n        }\n\n        if (match.length === ndx + 1) {\n          // Check if it's just a simple number \"1234\"\n          w = assign(match[ndx++], s);\n        } else if (match[ndx + 1] === '.' || match[ndx] === '.') {\n          // Check if it's a decimal number\n\n          if (match[ndx] !== '.') {\n            // Handle 0.5 and .5\n            v = assign(match[ndx++], s);\n          }\n          ndx++;\n\n          // Check for decimal places\n          if (\n            ndx + 1 === match.length ||\n            (match[ndx + 1] === '(' && match[ndx + 3] === ')') ||\n            (match[ndx + 1] === \"'\" && match[ndx + 3] === \"'\")\n          ) {\n            w = assign(match[ndx], s);\n            y = C_TEN ** BigInt(match[ndx].length);\n            ndx++;\n          }\n\n          // Check for repeating places\n          if (\n            (match[ndx] === '(' && match[ndx + 2] === ')') ||\n            (match[ndx] === \"'\" && match[ndx + 2] === \"'\")\n          ) {\n            x = assign(match[ndx + 1], s);\n            z = C_TEN ** BigInt(match[ndx + 1].length) - C_ONE;\n            ndx += 3;\n          }\n        } else if (match[ndx + 1] === '/' || match[ndx + 1] === ':') {\n          // Check for a simple fraction \"123/456\" or \"123:456\"\n          w = assign(match[ndx], s);\n          y = assign(match[ndx + 2], C_ONE);\n          ndx += 3;\n        } else if (match[ndx + 3] === '/' && match[ndx + 1] === ' ') {\n          // Check for a complex fraction \"123 1/2\"\n          v = assign(match[ndx], s);\n          w = assign(match[ndx + 2], s);\n          y = assign(match[ndx + 4], C_ONE);\n          ndx += 5;\n        }\n\n        if (match.length <= ndx) {\n          // Check for more tokens on the stack\n          d = y * z;\n          s = /* void */ n = x + d * v + z * w;\n        } else {\n          throw new InvalidParameter();\n        }\n      } else {\n        throw new InvalidParameter();\n      }\n\n      if (d === C_ZERO) {\n        throw new DivisionByZero();\n      }\n\n      P['s'] = s < C_ZERO ? -C_ONE : C_ONE;\n      P['n'] = n < C_ZERO ? -n : n;\n      P['d'] = d < C_ZERO ? -d : d;\n    };\n\n    function modpow(b, e, m) {\n      let r = C_ONE;\n      for (; e > C_ZERO; b = (b * b) % m, e >>= C_ONE) {\n        if (e & C_ONE) {\n          r = (r * b) % m;\n        }\n      }\n      return r;\n    }\n\n    function cycleLen(n, d) {\n      for (; d % C_TWO === C_ZERO; d /= C_TWO) {}\n\n      for (; d % C_FIVE === C_ZERO; d /= C_FIVE) {}\n\n      if (d === C_ONE)\n        // Catch non-cyclic numbers\n        return C_ZERO;\n\n      // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n      // 10^(d-1) % d == 1\n      // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n      // as we want to translate the numbers to strings.\n\n      let rem = C_TEN % d;\n      let t = C_ONE;\n\n      for (; rem !== C_ONE; t++) {\n        rem = (rem * C_TEN) % d;\n\n        if (t > MAX_CYCLE_LEN) return C_ZERO; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n      }\n      return t;\n    }\n\n    function cycleStart(n, d, len) {\n      let rem1 = C_ONE;\n      let rem2 = modpow(C_TEN, len, d);\n\n      for (let t = 0; t < 300; t++) {\n        // s < ~log10(Number.MAX_VALUE)\n        // Solve 10^s == 10^(s+t) (mod d)\n\n        if (rem1 === rem2) return BigInt(t);\n\n        rem1 = (rem1 * C_TEN) % d;\n        rem2 = (rem2 * C_TEN) % d;\n      }\n      return 0;\n    }\n\n    function gcd(a, b) {\n      if (!a) return b;\n      if (!b) return a;\n\n      while (1) {\n        a %= b;\n        if (!a) return b;\n        b %= a;\n        if (!b) return a;\n      }\n    }\n\n    /**\n     * Module constructor\n     *\n     * @constructor\n     * @param {number|Fraction=} a\n     * @param {number=} b\n     */\n    function Fraction(a, b) {\n      if (!(this instanceof Fraction)) {\n        return new Fraction(a, b);\n      }\n\n      parse(a, b);\n\n      a = gcd(P['d'], P['n']); // Abuse a\n\n      this['s'] = P['s'];\n      this['n'] = (P['n'] / a) | C_ZERO;\n      this['d'] = (P['d'] / a) | C_ZERO;\n    }\n\n    Fraction.prototype = {\n      s: C_ONE,\n      n: C_ZERO,\n      d: C_ONE,\n\n      /**\n       * Calculates the absolute value\n       *\n       * Ex: new Fraction(-4).abs() => 4\n       **/\n      abs: function () {\n        return new Fraction(this['n'], this['d']);\n      },\n\n      /**\n       * Inverts the sign of the current fraction\n       *\n       * Ex: new Fraction(-4).neg() => 4\n       **/\n      neg: function () {\n        return new Fraction(-this['s'] * this['n'], this['d']);\n      },\n\n      /**\n       * Adds two rational numbers\n       *\n       * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n       **/\n      add: function (a, b) {\n        parse(a, b);\n        return new Fraction(\n          this['s'] * this['n'] * P['d'] + P['s'] * this['d'] * P['n'],\n          this['d'] * P['d']\n        );\n      },\n\n      /**\n       * Subtracts two rational numbers\n       *\n       * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n       **/\n      sub: function (a, b) {\n        parse(a, b);\n        return new Fraction(\n          this['s'] * this['n'] * P['d'] - P['s'] * this['d'] * P['n'],\n          this['d'] * P['d']\n        );\n      },\n\n      /**\n       * Multiplies two rational numbers\n       *\n       * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n       **/\n      mul: function (a, b) {\n        parse(a, b);\n        return new Fraction(this['s'] * P['s'] * this['n'] * P['n'], this['d'] * P['d']);\n      },\n\n      /**\n       * Divides two rational numbers\n       *\n       * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n       **/\n      div: function (a, b) {\n        parse(a, b);\n        return new Fraction(this['s'] * P['s'] * this['n'] * P['d'], this['d'] * P['n']);\n      },\n\n      /**\n       * Clones the actual object\n       *\n       * Ex: new Fraction(\"-17.(345)\").clone()\n       **/\n      clone: function () {\n        return new Fraction(this);\n      },\n\n      /**\n       * Calculates the modulo of two rational numbers - a more precise fmod\n       *\n       * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n       **/\n      mod: function (a, b) {\n        if (a === undefined) {\n          return new Fraction((this['s'] * this['n']) % this['d'], 1);\n        }\n\n        parse(a, b);\n        if (0 === P['n'] && 0 === this['d']) {\n          Fraction(0, 0); // Throw DivisionByZero\n        }\n\n        /*\n       * First silly attempt, kinda slow\n       *\n       return that[\"sub\"]({\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n       \"d\": num[\"d\"],\n       \"s\": this[\"s\"]\n       });*/\n\n        /*\n         * New attempt: a1 / b1 = a2 / b2 * q + r\n         * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n         * => (b2 * a1 % a2 * b1) / (b1 * b2)\n         */\n        return new Fraction(\n          (this['s'] * (P['d'] * this['n'])) % (P['n'] * this['d']),\n          P['d'] * this['d']\n        );\n      },\n\n      /**\n       * Calculates the fractional gcd of two rational numbers\n       *\n       * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n       */\n      gcd: function (a, b) {\n        parse(a, b);\n\n        // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n        return new Fraction(gcd(P['n'], this['n']) * gcd(P['d'], this['d']), P['d'] * this['d']);\n      },\n\n      /**\n       * Calculates the fractional lcm of two rational numbers\n       *\n       * Ex: new Fraction(5,8).lcm(3,7) => 15\n       */\n      lcm: function (a, b) {\n        parse(a, b);\n\n        // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n        if (P['n'] === C_ZERO && this['n'] === C_ZERO) {\n          return new Fraction();\n        }\n        return new Fraction(P['n'] * this['n'], gcd(P['n'], this['n']) * gcd(P['d'], this['d']));\n      },\n\n      /**\n       * Gets the inverse of the fraction, means numerator and denominator are exchanged\n       *\n       * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n       **/\n      inverse: function () {\n        return new Fraction(this['s'] * this['d'], this['n']);\n      },\n\n      /**\n       * Calculates the fraction to some integer exponent\n       *\n       * Ex: new Fraction(-1,2).pow(-3) => -8\n       */\n      pow: function (m) {\n        if (m < 0) {\n          return new Fraction((this['s'] * this['d']) ** BigInt(-m), this['n'] ** BigInt(-m));\n        } else {\n          return new Fraction((this['s'] * this['n']) ** BigInt(+m), this['d'] ** BigInt(+m));\n        }\n      },\n\n      /**\n       * Check if two rational numbers are the same\n       *\n       * Ex: new Fraction(19.6).equals([98, 5]);\n       **/\n      equals: function (a, b) {\n        parse(a, b);\n        return this['s'] * this['n'] * P['d'] === P['s'] * P['n'] * this['d']; // Same as compare() === 0\n      },\n\n      /**\n       * Check if two rational numbers are the same\n       *\n       * Ex: new Fraction(19.6).equals([98, 5]);\n       **/\n      compare: function (a, b) {\n        parse(a, b);\n        let t = this['s'] * this['n'] * P['d'] - P['s'] * P['n'] * this['d'];\n\n        return (C_ZERO < t) - (t < C_ZERO);\n      },\n\n      /**\n       * Calculates the ceil of a rational number\n       *\n       * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n       **/\n      ceil: function (places) {\n        places = 10 ** Number(places || 0);\n\n        return new Fraction(\n          Math.ceil((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n          places\n        );\n      },\n\n      /**\n       * Calculates the floor of a rational number\n       *\n       * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n       **/\n      floor: function (places) {\n        places = 10 ** Number(places || 0);\n\n        return new Fraction(\n          Math.floor((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n          places\n        );\n      },\n\n      /**\n       * Rounds a rational numbers\n       *\n       * Ex: new Fraction('4.(3)').round() => (4 / 1)\n       **/\n      round: function (places) {\n        places = 10 ** Number(places || 0);\n\n        return new Fraction(\n          Math.round((places * Number(this['s'] * this['n'])) / Number(this['d'])),\n          places\n        );\n      },\n\n      /**\n       * Check if two rational numbers are divisible\n       *\n       * Ex: new Fraction(19.6).divisible(1.5);\n       */\n      divisible: function (a, b) {\n        parse(a, b);\n        return !(!(P['n'] * this['d']) || (this['n'] * P['d']) % (P['n'] * this['d']));\n      },\n\n      /**\n       * Returns a decimal representation of the fraction\n       *\n       * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n       **/\n      valueOf: function () {\n        // Best we can do so far\n        return Number(this['s'] * this['n']) / Number(this['d']);\n      },\n\n      /**\n       * Creates a string representation of a fraction with all digits\n       *\n       * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n       **/\n      toString: function (dec) {\n        let g;\n        let N = this['n'];\n        let D = this['d'];\n\n        dec = dec || 15; // 15 = decimal places when no repitation\n\n        let cycLen = cycleLen(N, D); // Cycle length\n        let cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n        let str = this['s'] < C_ZERO ? '-' : '';\n\n        // Append integer part\n        str += (N / D) | C_ZERO;\n\n        N %= D;\n        N *= C_TEN;\n\n        if (N) str += '.';\n\n        if (cycLen) {\n          for (let i = cycOff; i--; ) {\n            str += (N / D) | C_ZERO;\n            N %= D;\n            N *= C_TEN;\n          }\n          str += '(';\n          for (let i = cycLen; i--; ) {\n            str += (N / D) | C_ZERO;\n            N %= D;\n            N *= C_TEN;\n          }\n          str += ')';\n        } else {\n          for (let i = dec; N && i--; ) {\n            str += (N / D) | C_ZERO;\n            N %= D;\n            N *= C_TEN;\n          }\n        }\n        return str;\n      },\n\n      /**\n       * Returns a string-fraction representation of a Fraction object\n       *\n       * Ex: new Fraction(\"1.'3'\").toFraction() => \"4 1/3\"\n       **/\n      toFraction: function (excludeWhole) {\n        let n = this['n'];\n        let d = this['d'];\n        let str = this['s'] < C_ZERO ? '-' : '';\n\n        if (d === C_ONE) {\n          str += n;\n        } else {\n          let whole = (n / d) | C_ZERO;\n          if (excludeWhole && whole > C_ZERO) {\n            str += whole;\n            str += ' ';\n            n %= d;\n          }\n\n          str += n;\n          str += '/';\n          str += d;\n        }\n        return str;\n      },\n\n      /**\n       * Returns a latex representation of a Fraction object\n       *\n       * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n       **/\n      toLatex: function (excludeWhole) {\n        let n = this['n'];\n        let d = this['d'];\n        let str = this['s'] < C_ZERO ? '-' : '';\n\n        if (d === C_ONE) {\n          str += n;\n        } else {\n          let whole = (n / d) | C_ZERO;\n          if (excludeWhole && whole > C_ZERO) {\n            str += whole;\n            n %= d;\n          }\n\n          str += '\\\\frac{';\n          str += n;\n          str += '}{';\n          str += d;\n          str += '}';\n        }\n        return str;\n      },\n\n      /**\n       * Returns an array of continued fraction elements\n       *\n       * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n       */\n      toContinued: function () {\n        let a = this['n'];\n        let b = this['d'];\n        let res = [];\n\n        do {\n          res.push((a / b) | C_ZERO);\n          let t = a % b;\n          a = b;\n          b = t;\n        } while (a !== C_ONE);\n\n        return res;\n      },\n\n      simplify: function (eps) {\n        // First naive implementation, needs improvement\n\n        let cont = this['abs']()['toContinued']();\n\n        eps = eps || 0.001;\n\n        function rec(a) {\n          if (a.length === 1) return new Fraction(a[0]);\n          return rec(a.slice(1))['inverse']()['add'](a[0]);\n        }\n\n        for (let i = 0; i < cont.length; i++) {\n          let tmp = rec(cont.slice(0, i + 1));\n          if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {\n            return tmp['mul'](this['s']);\n          }\n        }\n        return this;\n      },\n    };\n\n    if (typeof define === 'function' && define['amd']) {\n      define([], function () {\n        return { Fraction, errorConstructor };\n      });\n    } else if (typeof exports === 'object') {\n      Object.defineProperty(exports, '__esModule', { value: true });\n      Fraction['default'] = Fraction;\n      Fraction['Fraction'] = Fraction;\n      module['exports'] = { Fraction, errorConstructor };\n    } else {\n      root['Fraction'] = Fraction;\n    }\n  })(this);\n} catch (error) {\n  console.log('Browser does not support BigInt.');\n}\n","/**\n * This package contains MiMC hashing utilities for use with Dark Forest.\n * The MiMC algorithm is used for both finding planet hashes and calculating\n * the perlin in-game. Among other things, these values are often needed for\n * generating Snarks.\n *\n * ## Installation\n *\n * You can install this package using [`npm`](https://www.npmjs.com) or\n * [`yarn`](https://classic.yarnpkg.com/lang/en/) by running:\n *\n * ```bash\n * npm install --save @darkforest_eth/hashing\n * ```\n * ```bash\n * yarn add @darkforest_eth/hashing\n * ```\n *\n * When using this in a plugin, you might want to load it with [skypack](https://www.skypack.dev)\n *\n * ```js\n * import * as hashing from 'http://cdn.skypack.dev/@darkforest_eth/hashing'\n * ```\n *\n * @packageDocumentation\n */\nimport { fakeHash, seededRandom } from './fakeHash';\nimport { Fraction } from './fractions/bigFraction.js';\nimport mimcHash, { modPBigInt, modPBigIntNative } from './mimc';\nimport { getRandomGradientAt, IntegerVector, MAX_PERLIN_VALUE, perlin, rand } from './perlin';\n\nexport {\n  mimcHash,\n  IntegerVector,\n  perlin,\n  rand,\n  getRandomGradientAt,\n  modPBigInt,\n  modPBigIntNative,\n  fakeHash,\n  seededRandom,\n  Fraction,\n  MAX_PERLIN_VALUE,\n};\n","import bigInt, { BigInteger } from 'big-integer';\n\nexport const p = bigInt(\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617'\n);\n\nconst c = [\n  '0',\n  '7120861356467848435263064379192047478074060781135320967663101236819528304084',\n  '5024705281721889198577876690145313457398658950011302225525409148828000436681',\n  '17980351014018068290387269214713820287804403312720763401943303895585469787384',\n  '19886576439381707240399940949310933992335779767309383709787331470398675714258',\n  '1213715278223786725806155661738676903520350859678319590331207960381534602599',\n  '18162138253399958831050545255414688239130588254891200470934232514682584734511',\n  '7667462281466170157858259197976388676420847047604921256361474169980037581876',\n  '7207551498477838452286210989212982851118089401128156132319807392460388436957',\n  '9864183311657946807255900203841777810810224615118629957816193727554621093838',\n  '4798196928559910300796064665904583125427459076060519468052008159779219347957',\n  '17387238494588145257484818061490088963673275521250153686214197573695921400950',\n  '10005334761930299057035055370088813230849810566234116771751925093634136574742',\n  '11897542014760736209670863723231849628230383119798486487899539017466261308762',\n  '16771780563523793011283273687253985566177232886900511371656074413362142152543',\n  '749264854018824809464168489785113337925400687349357088413132714480582918506',\n  '3683645737503705042628598550438395339383572464204988015434959428676652575331',\n  '7556750851783822914673316211129907782679509728346361368978891584375551186255',\n  '20391289379084797414557439284689954098721219201171527383291525676334308303023',\n  '18146517657445423462330854383025300323335289319277199154920964274562014376193',\n  '8080173465267536232534446836148661251987053305394647905212781979099916615292',\n  '10796443006899450245502071131975731672911747129805343722228413358507805531141',\n  '5404287610364961067658660283245291234008692303120470305032076412056764726509',\n  '4623894483395123520243967718315330178025957095502546813929290333264120223168',\n  '16845753148201777192406958674202574751725237939980634861948953189320362207797',\n  '4622170486584704769521001011395820886029808520586507873417553166762370293671',\n  '16688277490485052681847773549197928630624828392248424077804829676011512392564',\n  '11878652861183667748838188993669912629573713271883125458838494308957689090959',\n  '2436445725746972287496138382764643208791713986676129260589667864467010129482',\n  '1888098689545151571063267806606510032698677328923740058080630641742325067877',\n  '148924106504065664829055598316821983869409581623245780505601526786791681102',\n  '18875020877782404439294079398043479420415331640996249745272087358069018086569',\n  '15189693413320228845990326214136820307649565437237093707846682797649429515840',\n  '19669450123472657781282985229369348220906547335081730205028099210442632534079',\n  '5521922218264623411380547905210139511350706092570900075727555783240701821773',\n  '4144769320246558352780591737261172907511489963810975650573703217887429086546',\n  '10097732913112662248360143041019433907849917041759137293018029019134392559350',\n  '1720059427972723034107765345743336447947522473310069975142483982753181038321',\n  '6302388219880227251325608388535181451187131054211388356563634768253301290116',\n  '6745410632962119604799318394592010194450845483518862700079921360015766217097',\n  '10858157235265583624235850660462324469799552996870780238992046963007491306222',\n  '20241898894740093733047052816576694435372877719072347814065227797906130857593',\n  '10165780782761211520836029617746977303303335603838343292431760011576528327409',\n  '2832093654883670345969792724123161241696170611611744759675180839473215203706',\n  '153011722355526826233082383360057587249818749719433916258246100068258954737',\n  '20196970640587451358539129330170636295243141659030208529338914906436009086943',\n  '3180973917010545328313139835982464870638521890385603025657430208141494469656',\n  '17198004293191777441573635123110935015228014028618868252989374962722329283022',\n  '7642160509228669138628515458941659189680509753651629476399516332224325757132',\n  '19346204940546791021518535594447257347218878114049998691060016493806845179755',\n  '11501810868606870391127866188394535330696206817602260610801897042898616817272',\n  '3113973447392053821824427670386252797811804954746053461397972968381571297505',\n  '6545064306297957002139416752334741502722251869537551068239642131448768236585',\n  '5203908808704813498389265425172875593837960384349653691918590736979872578408',\n  '2246692432011290582160062129070762007374502637007107318105405626910313810224',\n  '11760570435432189127645691249600821064883781677693087773459065574359292849137',\n  '5543749482491340532547407723464609328207990784853381797689466144924198391839',\n  '8837549193990558762776520822018694066937602576881497343584903902880277769302',\n  '12855514863299373699594410385788943772765811961581749194183533625311486462501',\n  '5363660674689121676875069134269386492382220935599781121306637800261912519729',\n  '13162342403579303950549728848130828093497701266240457479693991108217307949435',\n  '916941639326869583414469202910306428966657806899788970948781207501251816730',\n  '15618589556584434434009868216186115416835494805174158488636000580759692174228',\n  '8959562060028569701043973060670353733575345393653685776974948916988033453971',\n  '16390754464333401712265575949874369157699293840516802426621216808905079127650',\n  '168282396747788514908709091757591226095443902501365500003618183905496160435',\n  '8327443473179334761744301768309008451162322941906921742120510244986704677004',\n  '17213012626801210615058753489149961717422101711567228037597150941152495100640',\n  '10394369641533736715250242399198097296122982486516256408681925424076248952280',\n  '17784386835392322654196171115293700800825771210400152504776806618892170162248',\n  '16533189939837087893364000390641148516479148564190420358849587959161226782982',\n  '18725396114211370207078434315900726338547621160475533496863298091023511945076',\n  '7132325028834551397904855671244375895110341505383911719294705267624034122405',\n  '148317947440800089795933930720822493695520852448386394775371401743494965187',\n  '19001050671757720352890779127693793630251266879994702723636759889378387053056',\n  '18824274411769830274877839365728651108434404855803844568234862945613766611460',\n  '12771414330193951156383998390424063470766226667986423961689712557338777174205',\n  '11332046574800279729678603488745295198038913503395629790213378101166488244657',\n  '9607550223176946388146938069307456967842408600269548190739947540821716354749',\n  '8756385288462344550200229174435953103162307705310807828651304665320046782583',\n  '176061952957067086877570020242717222844908281373122372938833890096257042779',\n  '12200212977482648306758992405065921724409841940671166017620928947866825250857',\n  '10868453624107875516866146499877130701929063632959660262366632833504750028858',\n  '2016095394399807253596787752134573207202567875457560571095586743878953450738',\n  '21815578223768330433802113452339488275704145896544481092014911825656390567514',\n  '4923772847693564777744725640710197015181591950368494148029046443433103381621',\n  '1813584943682214789802230765734821149202472893379265320098816901270224589984',\n  '10810123816265612772922113403831964815724109728287572256602010709288980656498',\n  '1153669123397255702524721206511185557982017410156956216465120456256288427021',\n  '5007518659266430200134478928344522649876467369278722765097865662497773767152',\n  '2511432546938591792036639990606464315121646668029252285288323664350666551637',\n  '32883284540320451295484135704808083452381176816565850047310272290579727564',\n  '10484856914279112612610993418405543310546746652738541161791501150994088679557',\n  '2026733759645519472558796412979210009170379159866522399881566309631434814953',\n  '14731806221235869882801331463708736361296174006732553130708107037190460654379',\n  '14740327483193277147065845135561988641238516852487657117813536909482068950652',\n  '18787428285295558781869865751953016580493190547148386433580291216673009884554',\n  '3804047064713122820157099453648459188816376755739202017447862327783289895072',\n  '16709604795697901641948603019242067672006293290826991671766611326262532802914',\n  '11061717085931490100602849654034280576915102867237101935487893025907907250695',\n  '2821730726367472966906149684046356272806484545281639696873240305052362149654',\n  '17467794879902895769410571945152708684493991588672014763135370927880883292655',\n  '1571520786233540988201616650622796363168031165456869481368085474420849243232',\n  '10041051776251223165849354194892664881051125330236567356945669006147134614302',\n  '3981753758468103976812813304477670033098707002886030847251581853700311567551',\n  '4365864398105436789177703571412645548020537580493599380018290523813331678900',\n  '2391801327305361293476178683853802679507598622000359948432171562543560193350',\n  '214219368547551689972421167733597094823289857206402800635962137077096090722',\n  '18192064100315141084242006659317257023098826945893371479835220462302399655674',\n  '15487549757142039139328911515400805508248576685795694919457041092150651939253',\n  '10142447197759703415402259672441315777933858467700579946665223821199077641122',\n  '11246573086260753259993971254725613211193686683988426513880826148090811891866',\n  '6574066859860991369704567902211886840188702386542112593710271426704432301235',\n  '11311085442652291634822798307831431035776248927202286895207125867542470350078',\n  '20977948360215259915441258687649465618185769343138135384346964466965010873779',\n  '792781492853909872425531014397300057232399608769451037135936617996830018501',\n  '5027602491523497423798779154966735896562099398367163998686335127580757861872',\n  '14595204575654316237672764823862241845410365278802914304953002937313300553572',\n  '13973538843621261113924259058427434053808430378163734641175100160836376897004',\n  '16395063164993626722686882727042150241125309409717445381854913964674649318585',\n  '8465768840047024550750516678171433288207841931251654898809033371655109266663',\n  '21345603324471810861925019445720576814602636473739003852898308205213912255830',\n  '21171984405852590343970239018692870799717057961108910523876770029017785940991',\n  '10761027113757988230637066281488532903174559953630210849190212601991063767647',\n  '6678298831065390834922566306988418588227382406175769592902974103663687992230',\n  '4993662582188632374202316265508850988596880036291765531885657575099537176757',\n  '18364168158495573675698600238443218434246806358811328083953887470513967121206',\n  '3506345610354615013737144848471391553141006285964325596214723571988011984829',\n  '248732676202643792226973868626360612151424823368345645514532870586234380100',\n  '10090204501612803176317709245679152331057882187411777688746797044706063410969',\n  '21297149835078365363970699581821844234354988617890041296044775371855432973500',\n  '16729368143229828574342820060716366330476985824952922184463387490091156065099',\n  '4467191506765339364971058668792642195242197133011672559453028147641428433293',\n  '8677548159358013363291014307402600830078662555833653517843708051504582990832',\n  '1022951765127126818581466247360193856197472064872288389992480993218645055345',\n  '1888195070251580606973417065636430294417895423429240431595054184472931224452',\n  '4221265384902749246920810956363310125115516771964522748896154428740238579824',\n  '2825393571154632139467378429077438870179957021959813965940638905853993971879',\n  '19171031072692942278056619599721228021635671304612437350119663236604712493093',\n  '10780807212297131186617505517708903709488273075252405602261683478333331220733',\n  '18230936781133176044598070768084230333433368654744509969087239465125979720995',\n  '16901065971871379877929280081392692752968612240624985552337779093292740763381',\n  '146494141603558321291767829522948454429758543710648402457451799015963102253',\n  '2492729278659146790410698334997955258248120870028541691998279257260289595548',\n  '2204224910006646535594933495262085193210692406133533679934843341237521233504',\n  '16062117410185840274616925297332331018523844434907012275592638570193234893570',\n  '5894928453677122829055071981254202951712129328678534592916926069506935491729',\n  '4947482739415078212217504789923078546034438919537985740403824517728200332286',\n  '16143265650645676880461646123844627780378251900510645261875867423498913438066',\n  '397690828254561723549349897112473766901585444153303054845160673059519614409',\n  '11272653598912269895509621181205395118899451234151664604248382803490621227687',\n  '15566927854306879444693061574322104423426072650522411176731130806720753591030',\n  '14222898219492484180162096141564251903058269177856173968147960855133048449557',\n  '16690275395485630428127725067513114066329712673106153451801968992299636791385',\n  '3667030990325966886479548860429670833692690972701471494757671819017808678584',\n  '21280039024501430842616328642522421302481259067470872421086939673482530783142',\n  '15895485136902450169492923978042129726601461603404514670348703312850236146328',\n  '7733050956302327984762132317027414325566202380840692458138724610131603812560',\n  '438123800976401478772659663183448617575635636575786782566035096946820525816',\n  '814913922521637742587885320797606426167962526342166512693085292151314976633',\n  '12368712287081330853637674140264759478736012797026621876924395982504369598764',\n  '2494806857395134874309386694756263421445039103814920780777601708371037591569',\n  '16101132301514338989512946061786320637179843435886825102406248183507106312877',\n  '6252650284989960032925831409804233477770646333900692286731621844532438095656',\n  '9277135875276787021836189566799935097400042171346561246305113339462708861695',\n  '10493603554686607050979497281838644324893776154179810893893660722522945589063',\n  '8673089750662709235894359384294076697329948991010184356091130382437645649279',\n  '9558393272910366944245875920138649617479779893610128634419086981339060613250',\n  '19012287860122586147374214541764572282814469237161122489573881644994964647218',\n  '9783723818270121678386992630754842961728702994964214799008457449989291229500',\n  '15550788416669474113213749561488122552422887538676036667630838378023479382689',\n  '15016165746156232864069722572047169071786333815661109750860165034341572904221',\n  '6506225705710197163670556961299945987488979904603689017479840649664564978574',\n  '10796631184889302076168355684722130903785890709107732067446714470783437829037',\n  '19871836214837460419845806980869387567383718044439891735114283113359312279540',\n  '20871081766843466343749609089986071784031203517506781251203251608363835140622',\n  '5100105771517691442278432864090229416166996183792075307747582375962855820797',\n  '8777887112076272395250620301071581171386440850451972412060638225741125310886',\n  '5300440870136391278944213332144327695659161151625757537632832724102670898756',\n  '1205448543652932944633962232545707633928124666868453915721030884663332604536',\n  '5542499997310181530432302492142574333860449305424174466698068685590909336771',\n  '11028094245762332275225364962905938096659249161369092798505554939952525894293',\n  '19187314764836593118404597958543112407224947638377479622725713735224279297009',\n  '17047263688548829001253658727764731047114098556534482052135734487985276987385',\n  '19914849528178967155534624144358541535306360577227460456855821557421213606310',\n  '2929658084700714257515872921366736697080475676508114973627124569375444665664',\n  '15092262360719700162343163278648422751610766427236295023221516498310468956361',\n  '21578580340755653236050830649990190843552802306886938815497471545814130084980',\n  '1258781501221760320019859066036073675029057285507345332959539295621677296991',\n  '3819598418157732134449049289585680301176983019643974929528867686268702720163',\n  '8653175945487997845203439345797943132543211416447757110963967501177317426221',\n  '6614652990340435611114076169697104582524566019034036680161902142028967568142',\n  '19212515502973904821995111796203064175854996071497099383090983975618035391558',\n  '18664315914479294273286016871365663486061896605232511201418576829062292269769',\n  '11498264615058604317482574216318586415670903094838791165247179252175768794889',\n  '10814026414212439999107945133852431304483604215416531759535467355316227331774',\n  '17566185590731088197064706533119299946752127014428399631467913813769853431107',\n  '14016139747289624978792446847000951708158212463304817001882956166752906714332',\n  '8242601581342441750402731523736202888792436665415852106196418942315563860366',\n  '9244680976345080074252591214216060854998619670381671198295645618515047080988',\n  '12216779172735125538689875667307129262237123728082657485828359100719208190116',\n  '10702811721859145441471328511968332847175733707711670171718794132331147396634',\n  '6479667912792222539919362076122453947926362746906450079329453150607427372979',\n  '15117544653571553820496948522381772148324367479772362833334593000535648316185',\n  '6842203153996907264167856337497139692895299874139131328642472698663046726780',\n  '12732823292801537626009139514048596316076834307941224506504666470961250728055',\n  '6936272626871035740815028148058841877090860312517423346335878088297448888663',\n  '17297554111853491139852678417579991271009602631577069694853813331124433680030',\n  '16641596134749940573104316021365063031319260205559553673368334842484345864859',\n  '7400481189785154329569470986896455371037813715804007747228648863919991399081',\n  '2273205422216987330510475127669563545720586464429614439716564154166712854048',\n  '15162538063742142685306302282127534305212832649282186184583465569986719234456',\n  '5628039096440332922248578319648483863204530861778160259559031331287721255522',\n  '16085392195894691829567913404182676871326863890140775376809129785155092531260',\n  '14227467863135365427954093998621993651369686288941275436795622973781503444257',\n  '18224457394066545825553407391290108485121649197258948320896164404518684305122',\n  '274945154732293792784580363548970818611304339008964723447672490026510689427',\n  '11050822248291117548220126630860474473945266276626263036056336623671308219529',\n  '2119542016932434047340813757208803962484943912710204325088879681995922344971',\n  '0',\n].map((n) => bigInt(n));\n\nclass FeistelState {\n  l: BigInteger;\n  r: BigInteger;\n  rounds: number;\n  k: BigInteger;\n\n  constructor(rounds: number, k: BigInteger) {\n    this.l = bigInt(0);\n    this.r = bigInt(0);\n    this.rounds = rounds;\n    this.k = k;\n  }\n\n  inject(elt: BigInteger): void {\n    this.l = this.l.add(elt).mod(p);\n  }\n\n  mix(): void {\n    for (let i = 0; i < this.rounds - 1; i++) {\n      const t = this.k.add(this.l).add(c[i]).mod(p);\n      const lNew = t.modPow(5, p).add(this.r).mod(p);\n      this.r = this.l;\n      this.l = lNew;\n    }\n    const t = this.k.add(this.l).mod(p);\n    this.r = t.modPow(5, p).add(this.r).mod(p);\n  }\n}\n\nfunction mimcSponge(\n  inputs: BigInteger[],\n  nOutputs: number,\n  rounds: number,\n  key: number\n): BigInteger[] {\n  const state = new FeistelState(rounds, bigInt(key));\n  for (const elt of inputs) {\n    state.inject(elt);\n    state.mix();\n  }\n  const outputs: BigInteger[] = [state.l];\n  for (let i = 0; i < nOutputs - 1; i++) {\n    state.mix();\n    outputs.push(state.l);\n  }\n  return outputs;\n}\n\n/**\n * Modulo a number with the LOCATION_ID_UB constant.\n * If the result is < 0, the LOCATION_ID_UB will then be added.\n *\n * @param x The number to modulo against LOCATION_ID_UB\n */\nexport function modPBigInt(x: number) {\n  let ret = bigInt(x).mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n}\n\n/**\n * Modulo a BigInt with the LOCATION_ID_UB constant.\n * If the result is < 0, the LOCATION_ID_UB will then be added.\n *\n * @param x The number to modulo against LOCATION_ID_UB\n */\nexport function modPBigIntNative(x: BigInteger) {\n  let ret = x.mod(p);\n  if (ret.lesser(bigInt(0))) {\n    ret = ret.add(p);\n  }\n  return ret;\n}\n\nexport const mimcWithRounds =\n  (rounds: number, key: number) =>\n  (...inputs: number[]) =>\n    mimcSponge(\n      inputs.map((n) => modPBigInt(n)),\n      1,\n      rounds,\n      key\n    )[0];\n\n/**\n * The primary function used to build any MiMC hashing algorithm for Dark Forest.\n *\n * @param key The key for the MiMC algorithm. Will usually be PLANETHASH_KEY, SPACETYPE_KEY, or BIOMEBASE_KEY.\n */\nfunction mimcHash(key: number) {\n  return mimcWithRounds(220, key);\n}\n\nexport const perlinRandHash = (key: number) => mimcWithRounds(4, key);\n\nexport default mimcHash;\n","import { PerlinConfig } from '@darkforest_eth/types';\nimport BigInt, { BigInteger } from 'big-integer';\nimport { Fraction } from './fractions/bigFraction.js';\nimport { perlinRandHash } from './mimc';\n\nconst TRACK_LCM = false;\n\n/**\n * A object containing a pair of x,y coordinates.\n */\nexport interface IntegerVector {\n  x: number;\n  y: number;\n}\n\ninterface Vector {\n  x: Fraction;\n  y: Fraction;\n}\n\ninterface GradientAtPoint {\n  coords: Vector;\n  gradient: Vector;\n}\n\ntype HashFn = (...inputs: number[]) => number;\n\nexport const rand =\n  (key: number) =>\n  (...args: number[]) => {\n    return perlinRandHash(key)(...args)\n      .remainder(16)\n      .toJSNumber();\n  };\n\n/*\nconst generateVecs = () => {\n  const vecs = 16;\n  const precision = 3;\n  let range: number[] = [];\n  for (let i = 0; i < vecs; i++) range.push(i);\n  const out = range\n    .map((x) => (x * Math.PI * 2) / vecs)\n    .map((x) => [\n      Math.floor(Math.cos(x) * 10 ** precision),\n      Math.floor(Math.sin(x) * 10 ** precision),\n    ]);\n\n  return out.map(([x, y]) => ({\n    x: new Fraction(x, 10 ** precision),\n    y: new Fraction(y, 10 ** precision),\n  }));\n};\n\nconst vecs = generateVecs();\n*/\nlet vecs: Array<Vector>;\ntry {\n  vecs = [\n    [1000, 0],\n    [923, 382],\n    [707, 707],\n    [382, 923],\n    [0, 1000],\n    [-383, 923],\n    [-708, 707],\n    [-924, 382],\n    [-1000, 0],\n    [-924, -383],\n    [-708, -708],\n    [-383, -924],\n    [-1, -1000],\n    [382, -924],\n    [707, -708],\n    [923, -383],\n  ].map(([x, y]) => ({ x: new Fraction(x, 1000), y: new Fraction(y, 1000) }));\n} catch (err) {\n  console.error('Browser does not support BigInt.', err);\n}\n\nexport const getRandomGradientAt = (point: Vector, scale: Fraction, randFn: HashFn): Vector => {\n  const val = vecs[randFn(point.x.valueOf(), point.y.valueOf(), scale.valueOf())];\n  return val;\n};\n\nconst minus: (a: Vector, b: Vector) => Vector = (a, b) => {\n  return {\n    x: a.x.sub(b.x),\n    y: a.y.sub(b.y),\n  };\n};\n\nconst dot: (a: Vector, b: Vector) => Fraction = (a, b) => {\n  return a.x.mul(b.x).add(a.y.mul(b.y));\n};\n\nconst smoothStep: (x: Fraction) => Fraction = (x) => {\n  // return 6 * x ** 5 - 15 * x ** 4 + 10 * x ** 3;\n  return x;\n};\n\nconst scalarMultiply: (s: Fraction, v: Vector) => Vector = (s, v) => ({\n  x: v.x.mul(s),\n  y: v.y.mul(s),\n});\n\nconst getWeight: (corner: Vector, p: Vector) => Fraction = (corner, p) => {\n  return smoothStep(new Fraction(1).sub(p.x.sub(corner.x).abs())).mul(\n    smoothStep(new Fraction(1).sub(p.y.sub(corner.y).abs()))\n  );\n};\n\n// p is in a scale x scale square. we scale down to a 1x1 square\nconst perlinValue: (\n  corners: [GradientAtPoint, GradientAtPoint, GradientAtPoint, GradientAtPoint],\n  scale: Fraction,\n  p: Vector\n) => Fraction = (corners, scale, p) => {\n  let ret = new Fraction(0);\n  for (const corner of corners) {\n    const distVec = minus(p, corner.coords);\n    ret = ret.add(\n      getWeight(\n        scalarMultiply(scale.inverse(), corner.coords),\n        scalarMultiply(scale.inverse(), p)\n      ).mul(dot(scalarMultiply(scale.inverse(), distVec), corner.gradient))\n    );\n  }\n  return ret;\n};\n\nlet runningLCM = BigInt(1);\n\nconst updateLCM = (oldLCM: BigInteger, newValue: BigInteger): BigInteger => {\n  if (!TRACK_LCM) {\n    return oldLCM;\n  }\n\n  const newLCM = BigInt.lcm(oldLCM, newValue);\n  if (newLCM !== oldLCM) {\n    console.log('LCM updated to ', newLCM);\n  }\n\n  return newLCM;\n};\n\n// fractional mod\nconst realMod = (dividend: Fraction, divisor: Fraction): Fraction => {\n  const temp = dividend.mod(divisor);\n  // temp.s is sign\n  if (temp.s.toString() === '-1') {\n    return temp.add(divisor);\n  }\n  return temp;\n};\n\nconst valueAt = (p: Vector, scale: Fraction, randFn: (...inputs: number[]) => number) => {\n  const bottomLeftCoords = {\n    x: p.x.sub(realMod(p.x, scale)),\n    y: p.y.sub(realMod(p.y, scale)),\n  };\n  const bottomRightCoords = {\n    x: bottomLeftCoords.x.add(scale),\n    y: bottomLeftCoords.y,\n  };\n  const topLeftCoords = {\n    x: bottomLeftCoords.x,\n    y: bottomLeftCoords.y.add(scale),\n  };\n  const topRightCoords = {\n    x: bottomLeftCoords.x.add(scale),\n    y: bottomLeftCoords.y.add(scale),\n  };\n\n  const bottomLeftGrad = {\n    coords: bottomLeftCoords,\n    gradient: getRandomGradientAt(bottomLeftCoords, scale, randFn),\n  };\n  const bottomRightGrad = {\n    coords: bottomRightCoords,\n    gradient: getRandomGradientAt(bottomRightCoords, scale, randFn),\n  };\n  const topLeftGrad = {\n    coords: topLeftCoords,\n    gradient: getRandomGradientAt(topLeftCoords, scale, randFn),\n  };\n  const topRightGrad = {\n    coords: topRightCoords,\n    gradient: getRandomGradientAt(topRightCoords, scale, randFn),\n  };\n\n  const out = perlinValue([bottomLeftGrad, bottomRightGrad, topLeftGrad, topRightGrad], scale, p);\n\n  return out;\n};\n\nexport const MAX_PERLIN_VALUE = 32;\n\n/**\n * Calculates the perlin for a location, given the x,y pair and the PerlinConfig for the game.\n *\n * @param coords An object of the x,y coordinates for which perlin is being calculated.\n * @param options An object containing the configuration for the perlin algorithm.\n */\nexport function perlin(coords: IntegerVector, options: PerlinConfig) {\n  let { x, y } = coords;\n  if (options.mirrorY) x = Math.abs(x); // mirror across the vertical y-axis\n  if (options.mirrorX) y = Math.abs(y); // mirror across the horizontal x-axis\n  const fractionalP = { x: new Fraction(x), y: new Fraction(y) };\n  let ret = new Fraction(0);\n  const pValues: Fraction[] = [];\n  for (let i = 0; i < 3; i += 1) {\n    // scale must be a power of two, up to 8192\n    pValues.push(valueAt(fractionalP, new Fraction(options.scale * 2 ** i), rand(options.key)));\n  }\n  ret = ret.add(pValues[0]);\n  ret = ret.add(pValues[0]);\n  ret = ret.add(pValues[1]);\n  ret = ret.add(pValues[2]);\n\n  ret = ret.div(4);\n  runningLCM = updateLCM(runningLCM, BigInt(ret.d));\n\n  ret = ret.mul(MAX_PERLIN_VALUE / 2);\n  if (options.floor) ret = ret.floor();\n  ret = ret.add(MAX_PERLIN_VALUE / 2);\n\n  const out = ret.valueOf();\n  return Math.floor(out * 100) / 100;\n}\n","import type { ArtifactId, EthAddress, LocationId, VoyageId } from './identifier';\nimport { Abstract } from './utility';\n\n/**\n * Represents a voyage.\n */\nexport interface QueuedArrival {\n  eventId: VoyageId;\n  player: EthAddress;\n  fromPlanet: LocationId;\n  toPlanet: LocationId;\n  energyArriving: number;\n  silverMoved: number;\n  artifactId?: ArtifactId;\n  departureTime: number;\n  distance: number;\n  arrivalTime: number;\n  arrivalType: ArrivalType;\n}\n\n/**\n * Abstract type representing an arrival type.\n */\nexport type ArrivalType = Abstract<number, 'ArrivalType'>;\n\n/**\n * Enumeration of arrival types.\n */\nexport const ArrivalType = {\n  Unknown: 0 as ArrivalType,\n  Normal: 1 as ArrivalType,\n  Photoid: 2 as ArrivalType,\n  Wormhole: 3 as ArrivalType,\n} as const;\n\n/**\n * Convenience type for storing a voyage and a reference to a timeout that is triggered on voyage\n * arrival (in case the timeout needs to be cancelled).\n */\nexport interface ArrivalWithTimer {\n  /**\n   * TODO: rename to `arrival` or 'voyage'.\n   */\n  arrivalData: QueuedArrival;\n  timer: ReturnType<typeof setTimeout>;\n}\n","import type { Biome } from './game_types';\nimport type { ArtifactId, EthAddress, LocationId, VoyageId } from './identifier';\nimport type { TransactionCollection } from './transaction';\nimport type { Upgrade } from './upgrade';\nimport type { Abstract } from './utility';\n\n/**\n * Abstract type representing an artifact type.\n */\nexport type ArtifactType = Abstract<number, 'ArtifactType'>;\n\n/**\n * Enumeration of artifact types.\n */\nexport const ArtifactType = {\n  Unknown: 0 as ArtifactType,\n  Monolith: 1 as ArtifactType,\n  Colossus: 2 as ArtifactType,\n  Spaceship: 3 as ArtifactType,\n  Pyramid: 4 as ArtifactType,\n  Wormhole: 5 as ArtifactType,\n  PlanetaryShield: 6 as ArtifactType,\n  PhotoidCannon: 7 as ArtifactType,\n  BloomFilter: 8 as ArtifactType,\n  BlackDomain: 9 as ArtifactType,\n  ShipMothership: 10 as ArtifactType,\n  ShipCrescent: 11 as ArtifactType,\n  ShipWhale: 12 as ArtifactType,\n  ShipGear: 13 as ArtifactType,\n  ShipTitan: 14 as ArtifactType,\n\n  // Don't forget to update MIN_ARTIFACT_TYPE and/or MAX_ARTIFACT_TYPE in the `constants` package\n} as const;\n\n/**\n * Mapping from ArtifactType to pretty-printed names.\n */\nexport const ArtifactTypeNames = {\n  [ArtifactType.Unknown]: 'Unknown',\n  [ArtifactType.Monolith]: 'Monolith',\n  [ArtifactType.Colossus]: 'Colossus',\n  [ArtifactType.Spaceship]: 'Spaceship',\n  [ArtifactType.Pyramid]: 'Pyramid',\n  [ArtifactType.Wormhole]: 'Wormhole',\n  [ArtifactType.PlanetaryShield]: 'Planetary Shield',\n  [ArtifactType.BlackDomain]: 'Black Domain',\n  [ArtifactType.PhotoidCannon]: 'Photoid Cannon',\n  [ArtifactType.BloomFilter]: 'Bloom Filter',\n  [ArtifactType.ShipMothership]: 'Mothership',\n  [ArtifactType.ShipCrescent]: 'Crescent',\n  [ArtifactType.ShipWhale]: 'Whale',\n  [ArtifactType.ShipGear]: 'Gear',\n  [ArtifactType.ShipTitan]: 'Titan',\n} as const;\n\n/**\n * Abstract type representing an artifact rarity level.\n */\nexport type ArtifactRarity = Abstract<number, 'ArtifactRarity'>;\n\n/**\n * Enumeration of artifact rarity levels. Common = 1, Mythic = 5\n */\nexport const ArtifactRarity = {\n  Unknown: 0 as ArtifactRarity,\n  Common: 1 as ArtifactRarity,\n  Rare: 2 as ArtifactRarity,\n  Epic: 3 as ArtifactRarity,\n  Legendary: 4 as ArtifactRarity,\n  Mythic: 5 as ArtifactRarity,\n  // Don't forget to update MIN_ARTIFACT_RARITY and/or MAX_ARTIFACT_RARITY in the `constants` package\n} as const;\n\n/**\n * Mapping from ArtifactRarity to pretty-printed names.\n */\nexport const ArtifactRarityNames = {\n  [ArtifactRarity.Unknown]: 'Unknown',\n  [ArtifactRarity.Common]: 'Common',\n  [ArtifactRarity.Rare]: 'Rare',\n  [ArtifactRarity.Epic]: 'Epic',\n  [ArtifactRarity.Legendary]: 'Legendary',\n  [ArtifactRarity.Mythic]: 'Mythic',\n} as const;\n\n/**\n * mapping from ArtifactRarity to points earned for finding this artifact.\n */\nexport type ArtifactPointValues = { [ArtifactRarity: number]: number };\n\n/**\n * Represents data associated with a Dark Forest artifact NFT. Note\n * that some `Artifact` fields store client-specific data that the blockchain is\n * not aware of, such as `unconfirmedDepositArtifact` (tracks pending\n * depositArtifact transaction that involves this artifact). If you're using a\n * client that can't send transactions, these fields should be ignored.\n */\nexport type Artifact = {\n  isInititalized: boolean;\n  id: ArtifactId;\n  planetDiscoveredOn: LocationId;\n  rarity: ArtifactRarity;\n  planetBiome: Biome;\n  mintedAtTimestamp: number;\n  discoverer: EthAddress;\n  artifactType: ArtifactType;\n  activations: number;\n  lastActivated: number;\n  lastDeactivated: number;\n  controller: EthAddress;\n\n  upgrade: Upgrade;\n  timeDelayedUpgrade: Upgrade;\n  currentOwner: EthAddress; // owner of the NFT - can be the contract\n  wormholeTo?: LocationId;\n  onPlanetId?: LocationId;\n  onVoyageId?: VoyageId;\n\n  transactions?: TransactionCollection;\n};\n\n// TODO: get this out of here\n\nconst godGrammar = {\n  god1: [\n    \"c'\",\n    'za',\n    \"ry'\",\n    \"ab'\",\n    \"bak'\",\n    \"dt'\",\n    \"ek'\",\n    \"fah'\",\n    \"q'\",\n    'qo',\n    'van',\n    'bow',\n    'gui',\n    'si',\n  ],\n  god2: [\n    'thun',\n    'tchalla',\n    'thovo',\n    'saron',\n    'zoth',\n    'sharrj',\n    'thulu',\n    'ra',\n    'wer',\n    'doin',\n    'renstad',\n    'nevere',\n    'goth',\n    'anton',\n    'layton',\n  ],\n};\n\n/**\n * Deterministically generates the name of the artifact from its ID.\n *\n * @param artifact The artifact to generate a name for\n */\nexport function artifactNameFromArtifact(artifact: Artifact) {\n  const idNum = parseInt(artifact.id, 16);\n\n  const roll1 = (idNum % 7919) % godGrammar.god1.length; // 7919 is a big prime\n  const roll2 = (idNum % 7883) % godGrammar.god2.length; // 7883 is a big prime\n\n  const name = godGrammar.god1[roll1] + godGrammar.god2[roll2];\n  const nameCapitalized = name.charAt(0).toUpperCase() + name.slice(1);\n\n  return nameCapitalized;\n}\n\n/**\n * type interface for ERC721 metadata.\n */\n\ntype NFTAttribute = {\n  trait_type: string;\n  value: string | number;\n  display_type?: string;\n};\nexport type NFTMetadata = {\n  name: string;\n  description: string;\n  image: string;\n  attributes: NFTAttribute[];\n};\n\nexport interface RenderedArtifact extends Partial<Artifact> {\n  artifactType: ArtifactType;\n  planetBiome: Biome;\n  rarity: ArtifactRarity;\n  id: ArtifactId; // for rolls\n}\n\nexport type Wormhole = {\n  from: LocationId;\n  to: LocationId;\n};\n","import type { Abstract } from './utility';\n\n/**\n * Abstract type representing a type of space.\n */\nexport type SpaceType = Abstract<number, 'SpaceType'>;\n\n/**\n * Enumeration of the types of space in the game. NEBULA = 0, DEAD_SPACE = 3\n */\nexport const SpaceType = {\n  NEBULA: 0 as SpaceType,\n  SPACE: 1 as SpaceType,\n  DEEP_SPACE: 2 as SpaceType,\n  DEAD_SPACE: 3 as SpaceType,\n} as const;\n\n/**\n * Mapping from SpaceType to pretty-printed names.\n */\nexport const SpaceTypeNames = {\n  [SpaceType.NEBULA]: 'Nebula',\n  [SpaceType.SPACE]: 'Space',\n  [SpaceType.DEEP_SPACE]: 'Deep Space',\n  [SpaceType.DEAD_SPACE]: 'Dead Space',\n} as const;\n\n/**\n * Abstract type representing a biome.\n */\nexport type Biome = Abstract<number, 'Biome'>;\n\n/**\n * Enumeration of the biomes in the game. OCEAN = 1, CORRUPTED = 10\n */\nexport const Biome = {\n  UNKNOWN: 0 as Biome,\n  OCEAN: 1 as Biome,\n  FOREST: 2 as Biome,\n  GRASSLAND: 3 as Biome,\n  TUNDRA: 4 as Biome,\n  SWAMP: 5 as Biome,\n  DESERT: 6 as Biome,\n  ICE: 7 as Biome,\n  WASTELAND: 8 as Biome,\n  LAVA: 9 as Biome,\n  CORRUPTED: 10 as Biome,\n  // Don't forget to update MIN_BIOME and/or MAX_BIOME in the `constants` package\n} as const;\n\n/**\n * Mapping from Biome to pretty-printed names.\n */\nexport const BiomeNames = {\n  [Biome.UNKNOWN]: 'Unknown',\n  [Biome.OCEAN]: 'Ocean',\n  [Biome.FOREST]: 'Forest',\n  [Biome.GRASSLAND]: 'Grassland',\n  [Biome.TUNDRA]: 'Tundra',\n  [Biome.SWAMP]: 'Swamp',\n  [Biome.DESERT]: 'Desert',\n  [Biome.ICE]: 'Ice',\n  [Biome.WASTELAND]: 'Wasteland',\n  [Biome.LAVA]: 'Lava',\n  [Biome.CORRUPTED]: 'Corrupted',\n} as const;\n","import { Abstract } from './utility';\n\nexport type HatType = Abstract<string, 'HatType'>;\n\nexport const HatType = {\n  GraduationCap: 'GraduationCap' as HatType,\n  PartyHat: 'PartyHat' as HatType,\n  Fish: 'Fish' as HatType,\n  TopHat: 'TopHat' as HatType,\n  Fez: 'Fez' as HatType,\n  ChefHat: 'ChefHat' as HatType,\n  CowboyHat: 'CowboyHat' as HatType,\n  PopeHat: 'PopeHat' as HatType,\n  Squid: 'Squid' as HatType,\n  SantaHat: 'SantaHat' as HatType,\n};\n","/**\n * This package contains commonly-used data types in the Dark Forest webclient,\n * also accessible in node.js server environments.\n *\n * ## Installation\n *\n * You can install this package using [`npm`](https://www.npmjs.com) or\n * [`yarn`](https://classic.yarnpkg.com/lang/en/) by running:\n *\n * ```bash\n * npm install --save @darkforest_eth/types\n * ```\n * ```bash\n * yarn add @darkforest_eth/types\n * ```\n *\n * When using this in a plugin, you might want to load it with [skypack](https://www.skypack.dev)\n *\n * ```js\n * import * as types from 'http://cdn.skypack.dev/@darkforest_eth/types'\n * ```\n *\n * @packageDocumentation\n */\n\nexport * from './arrival';\nexport * from './artifact';\nexport * from './capture_zones';\nexport * from './claim';\nexport * from './database_types';\nexport * from './diagnostics';\nexport * from './event';\nexport * from './game_types';\nexport * from './gas_prices';\nexport * from './hat';\nexport * from './identifier';\nexport * from './modal';\nexport * from './planet';\nexport * from './planetmessage';\nexport * from './player';\nexport * from './plugin';\nexport * from './renderer';\nexport * from './reveal';\nexport * from './setting';\nexport * from './transaction';\nexport * from './transactions';\nexport * from './upgrade';\nexport * from './utility';\nexport * from './webserver';\nexport * from './world';\n","import type { PluginId } from './plugin';\nimport type { Abstract } from './utility';\n\n/**\n * Modals can either be built into the game, or spawned by a plugin.\n */\nexport type ModalId = ModalName | PluginId;\n\n/**\n * Modals built into the game have a human-readable name.\n */\nexport type ModalName = Abstract<string, 'ModalName'>;\n\nexport const ModalName = {\n  Help: 'Help' as ModalName,\n  PlanetDetails: 'PlanetDetails' as ModalName,\n  Leaderboard: 'Leaderboard' as ModalName,\n  PlanetDex: 'PlanetDex' as ModalName,\n  UpgradeDetails: 'UpgradeDetails' as ModalName,\n  TwitterVerify: 'TwitterVerify' as ModalName,\n  Broadcast: 'Broadcast' as ModalName,\n  Hats: 'Hats' as ModalName,\n  Settings: 'Settings' as ModalName,\n  YourArtifacts: 'YourArtifacts' as ModalName,\n  ManageArtifacts: 'ManageArtifacts' as ModalName,\n  Plugins: 'Plugins' as ModalName,\n  PluginWarning: 'PluginWarning' as ModalName,\n  PluginEditor: 'PluginEditor' as ModalName,\n  PlanetContextPane: 'PlanetContextPane' as ModalName,\n  TransactionLog: 'TransactionLog' as ModalName,\n\n  WithdrawSilver: 'WithdrawSilver' as ModalName,\n  Diagnostics: 'Diagnostics' as ModalName,\n\n  ArtifactConversation: 'ArtifactConversation' as ModalName,\n  ArtifactDetails: 'ArtifactDetails' as ModalName,\n  MapShare: 'MapShare' as ModalName,\n  ManageAccount: 'ManageAccount' as ModalName,\n  Onboarding: 'Onboarding' as ModalName,\n  Private: 'Private' as ModalName,\n};\n\nexport type CursorState = Abstract<string, 'CursorState'>;\n\nexport const CursorState = {\n  Normal: 'Normal' as CursorState,\n  TargetingExplorer: 'TargetingExplorer' as CursorState,\n  TargetingForces: 'TargetingForces' as CursorState,\n};\n\nexport type ModalManagerEvent = Abstract<string, 'ModalManagerEvent'>;\n\nexport const ModalManagerEvent = {\n  StateChanged: 'StateChanged',\n  MiningCoordsUpdate: 'MiningCoordsUpdate',\n};\n\nexport type TooltipName = Abstract<string, 'TooltipName'>;\n\nexport const TooltipName = {\n  SilverGrowth: 'SilverGrowth' as TooltipName,\n  SilverCap: 'SilverCap' as TooltipName,\n  Silver: 'Silver' as TooltipName,\n  TwitterHandle: 'TwitterHandle' as TooltipName,\n  Bonus: 'Bonus' as TooltipName,\n  MinEnergy: 'MinEnergy' as TooltipName,\n  Time50: 'Time50' as TooltipName,\n  Time90: 'Time90' as TooltipName,\n  Pirates: 'Pirates' as TooltipName,\n  Upgrades: 'Upgrades' as TooltipName,\n  PlanetRank: 'PlanetRank' as TooltipName,\n  MaxLevel: 'MaxLevel' as TooltipName,\n  FindArtifact: 'FindArtifact' as TooltipName,\n  ArtifactStored: 'ArtifactStored' as TooltipName,\n  SelectedSilver: 'SelectedSilver' as TooltipName,\n  Rank: 'Rank' as TooltipName,\n  Score: 'Score' as TooltipName,\n  MiningPause: 'MiningPause' as TooltipName,\n  MiningTarget: 'MiningTarget' as TooltipName,\n  HashesPerSec: 'HashesPerSec' as TooltipName,\n  CurrentMining: 'CurrentMining' as TooltipName,\n  HoverPlanet: 'HoverPlanet' as TooltipName,\n  SilverProd: 'SilverProd' as TooltipName,\n  TimeUntilActivationPossible: 'TimeUntilActivationPossible' as TooltipName,\n  DepositArtifact: 'DepositArtifact' as TooltipName,\n  DeactivateArtifact: 'DeactivateArtifact' as TooltipName,\n  WithdrawArtifact: 'WithdrawArtifact' as TooltipName,\n  ActivateArtifact: 'ActivateArtifact' as TooltipName,\n  RetryTransaction: 'RetryTransaction' as TooltipName,\n  CancelTransaction: 'CancelTransaction' as TooltipName,\n  PrioritizeTransaction: 'PrioritizeTransaction' as TooltipName,\n\n  DefenseMultiplier: 'DefenseMultiplier' as TooltipName,\n  EnergyCapMultiplier: 'EnergyCapMultiplier' as TooltipName,\n  EnergyGrowthMultiplier: 'EnergyGrowthMultiplier' as TooltipName,\n  RangeMultiplier: 'RangeMultiplier' as TooltipName,\n  SpeedMultiplier: 'SpeedMultiplier' as TooltipName,\n\n  BonusEnergyCap: 'BonusEnergyCap' as TooltipName,\n  BonusEnergyGro: 'BonusEnergyGro' as TooltipName,\n  BonusRange: 'BonusRange' as TooltipName,\n  BonusSpeed: 'BonusSpeed' as TooltipName,\n  BonusDefense: 'BonusDefense' as TooltipName,\n  BonusSpaceJunk: 'BonusSpaceJunk' as TooltipName,\n\n  Energy: 'Energy' as TooltipName,\n  EnergyGrowth: 'EnergyGrowth' as TooltipName,\n  Range: 'Range' as TooltipName,\n  Speed: 'Speed' as TooltipName,\n  Defense: 'Defense' as TooltipName,\n  SpaceJunk: 'SpaceJunk' as TooltipName,\n  Abandon: 'Abandon' as TooltipName,\n\n  Clowntown: 'Clowntown' as TooltipName,\n\n  ArtifactBuff: 'ArtifactBuff' as TooltipName,\n\n  ModalHelp: 'ModalHelp' as TooltipName,\n  ModalPlanetDetails: 'ModalPlanetDetails' as TooltipName,\n  ModalLeaderboard: 'ModalLeaderboard' as TooltipName,\n  ModalPlanetDex: 'ModalPlanetDex' as TooltipName,\n  ModalUpgradeDetails: 'ModalUpgradeDetails' as TooltipName,\n  ModalTwitterVerification: 'ModalTwitterVerification' as TooltipName,\n  ModalTwitterBroadcast: 'ModalTwitterBroadcast' as TooltipName,\n  ModalHats: 'ModalHats' as TooltipName,\n  ModalSettings: 'ModalSettings' as TooltipName,\n  ModalYourArtifacts: 'ModalYourArtifacts' as TooltipName,\n  ModalFindArtifact: 'ModalFindArtifact' as TooltipName,\n  ModalPlugins: 'ModalPlugins' as TooltipName,\n  ModalWithdrawSilver: 'ModalWithdrawSilver' as TooltipName,\n  NetworkHealth: 'NetworkHealth' as TooltipName,\n  WithdrawSilverButton: 'WithdrawSilverButton' as TooltipName,\n  Invadable: 'Invadable' as TooltipName,\n  Capturable: 'Capturable' as TooltipName,\n  /**\n   * So that you can render a tooltip without anything, and control its contents entirely via the\n   * {@link TooltipTriggerProps#extraContent} prop field.\n   */\n  Empty: 'Empty' as TooltipName,\n};\n\n/**\n * Contains metadata on modals in the game. Meant to store coordinates and state. Is\n * uniquely identified by a ModalId, which typically either the modalId of a given modal pane, or\n * plugin id.\n */\nexport interface ModalPosition {\n  x?: number;\n  y?: number;\n  state: 'open' | 'closed' | 'minimized';\n  modalId: ModalId;\n}\n\nexport type ModalPositions = Map<ModalId, ModalPosition>;\n","import type { Biome, SpaceType } from './game_types';\nimport type { ArtifactId, EthAddress, LocationId } from './identifier';\nimport type { PlanetMessage } from './planetmessage';\nimport { TransactionCollection } from './transaction';\nimport type { Upgrade, UpgradeState } from './upgrade';\nimport type { Abstract } from './utility';\nimport type { WorldLocation } from './world';\n\n/**\n * Abstract type representing a planet level.\n */\nexport type PlanetLevel = Abstract<number, 'PlanetLevel'>;\n\n/**\n * Enumeration of the possible planet levels.\n */\nexport const PlanetLevel = {\n  ZERO: 0 as PlanetLevel,\n  ONE: 1 as PlanetLevel,\n  TWO: 2 as PlanetLevel,\n  THREE: 3 as PlanetLevel,\n  FOUR: 4 as PlanetLevel,\n  FIVE: 5 as PlanetLevel,\n  SIX: 6 as PlanetLevel,\n  SEVEN: 7 as PlanetLevel,\n  EIGHT: 8 as PlanetLevel,\n  NINE: 9 as PlanetLevel,\n  // Don't forget to update MIN_PLANET_LEVEL and/or MAX_PLANET_LEVEL in the `constants` package\n} as const;\n\n/**\n * Mapping from PlanetLevel to pretty-printed names.\n */\nexport const PlanetLevelNames = {\n  [PlanetLevel.ZERO]: 'Level 0',\n  [PlanetLevel.ONE]: 'Level 1',\n  [PlanetLevel.TWO]: 'Level 2',\n  [PlanetLevel.THREE]: 'Level 3',\n  [PlanetLevel.FOUR]: 'Level 4',\n  [PlanetLevel.FIVE]: 'Level 5',\n  [PlanetLevel.SIX]: 'Level 6',\n  [PlanetLevel.SEVEN]: 'Level 7',\n  [PlanetLevel.EIGHT]: 'Level 8',\n  [PlanetLevel.NINE]: 'Level 9',\n} as const;\n\n/**\n * Abstract type representing a planet type.\n */\nexport type PlanetType = Abstract<number, 'PlanetType'>;\n\n/**\n * Enumeration of the planet types. (PLANET = 0, SILVER_BANK = 4)\n */\nexport const PlanetType = {\n  PLANET: 0 as PlanetType,\n  SILVER_MINE: 1 as PlanetType,\n  RUINS: 2 as PlanetType,\n  TRADING_POST: 3 as PlanetType,\n  SILVER_BANK: 4 as PlanetType,\n} as const;\n\n/**\n * Mapping from PlanetType to pretty-printed names.\n */\nexport const PlanetTypeNames = {\n  [PlanetType.PLANET]: 'Planet',\n  [PlanetType.SILVER_MINE]: 'Asteroid Field',\n  [PlanetType.RUINS]: 'Foundry',\n  [PlanetType.TRADING_POST]: 'Spacetime Rip',\n  [PlanetType.SILVER_BANK]: 'Quasar',\n} as const;\n\n/**\n * A list of five flags, indicating whether the planet has an attached comet\n * doubling each of five stats: (in order) [energyCap, energyGrowth, range,\n * speed, defense]\n */\nexport type PlanetBonus = [boolean, boolean, boolean, boolean, boolean, boolean];\n\n/**\n * Represents a Dark Forest planet object (planets, asteroid fields, quasars,\n * spacetime rips, and foundries). Note that some `Planet` fields (1) store\n * client-specific data that the blockchain is not aware of, such as\n * `unconfirmedDepartures` (tracks pending moves originating at this planet that\n * have been submitted to the blockchain from a client), or (2) store derived\n * data that is calculated separately client-side, such as `silverSpent` and\n * `bonus`. So this object does not cleanly map to any single object in the\n * DarkForest contract (or even any collection of objects).\n */\nexport type Planet = {\n  locationId: LocationId;\n  perlin: number;\n  spaceType: SpaceType;\n  owner: EthAddress; // should never be null; all unowned planets should have 0 address\n  hatLevel: number;\n\n  planetLevel: PlanetLevel;\n  planetType: PlanetType;\n  isHomePlanet: boolean;\n\n  energyCap: number;\n  energyGrowth: number;\n\n  silverCap: number;\n  silverGrowth: number;\n\n  range: number;\n  defense: number;\n  speed: number;\n\n  energy: number;\n  silver: number;\n\n  spaceJunk: number;\n\n  lastUpdated: number;\n  upgradeState: UpgradeState;\n  hasTriedFindingArtifact: boolean;\n  heldArtifactIds: ArtifactId[];\n  destroyed: boolean;\n  prospectedBlockNumber?: number;\n  localPhotoidUpgrade?: Upgrade;\n\n  transactions?: TransactionCollection;\n  unconfirmedAddEmoji: boolean;\n  unconfirmedClearEmoji: boolean;\n  loadingServerState: boolean;\n  needsServerRefresh: boolean;\n  lastLoadedServerState?: number;\n\n  emojiBobAnimation?: DFAnimation;\n  emojiZoopAnimation?: DFAnimation;\n  emojiZoopOutAnimation?: DFStatefulAnimation<string>;\n\n  silverSpent: number;\n\n  isInContract: boolean;\n  syncedWithContract: boolean;\n  coordsRevealed: boolean;\n  revealer?: EthAddress;\n  claimer?: EthAddress;\n  messages?: PlanetMessage<unknown>[];\n\n  bonus: PlanetBonus;\n\n  pausers: number;\n\n  invader?: EthAddress;\n  capturer?: EthAddress;\n  invadeStartBlock?: number;\n};\n\n/**\n * A planet whose coordinates are known to the client.\n */\nexport type LocatablePlanet = Planet & {\n  location: WorldLocation;\n  biome: Biome;\n};\n\n/**\n * A structure with default stats of planets in nebula at corresponding levels. For\n * example, silverCap[4] refers to the default silver capacity of a level 4\n * planet in nebula with no modifiers.\n */\nexport interface PlanetDefaults {\n  populationCap: number[];\n  populationGrowth: number[];\n  range: number[];\n  speed: number[];\n  defense: number[];\n  silverGrowth: number[];\n  silverCap: number[];\n  barbarianPercentage: number[];\n}\n\nexport class DFAnimation {\n  private readonly _update: () => number;\n  private _value: number;\n\n  public constructor(update: () => number) {\n    this._update = update;\n    this._value = 0;\n  }\n\n  public update() {\n    this._value = this._update();\n  }\n\n  public value() {\n    return this._value;\n  }\n}\n\nexport class DFStatefulAnimation<T> extends DFAnimation {\n  private readonly _state: T;\n\n  public constructor(state: T, update: () => number) {\n    super(update);\n    this._state = state;\n  }\n\n  public state(): T {\n    return this._state;\n  }\n}\n","import type { EthAddress, LocationId } from './identifier';\nimport type { Abstract } from './utility';\n\n/**\n * This set of types essentially defines a protocol by which we can add individual `Message`s (which\n * have a `type` and a `sender` and a `timeCreated` and a `body`, where the body can really be\n * anything) to individual planets. A planet can have an unlimited amount of messages of any type.\n * Rate limiting, serializing/deserializing, enforcing ownership requirements, all these things are\n * *not* the responsibility of this message protocol. Use this as a storage mechanism and take care\n * of the buisness logic yourself.\n *\n * Currently there is one type of message that a planet can have: an single emoji 'flag' set by the\n * owner of the planet, which hovers above the planet on everyone's web client.\n *\n * In the future, we might consider building things like:\n * - a comment on a planet. anyone can just post any text comment.\n * - an emoji react to a planet.\n * - an http url set by the owner of the planet\n * - some cosmetic item that we want to give some planets.\n * - a markdown file posted by the owner of the planet.\n *\n * In the future, we might also consider supporting at the very least submitting hashes of these\n * messages on-chain.\n */\n\n/**\n * Abstract type representing a type of planet message.\n */\nexport type PlanetMessageType = Abstract<string, 'PlanetMessageType'>;\n\n/**\n * Each message type has a corresponding entry here.\n */\nexport const PlanetMessageType = {\n  EmojiFlag: 'EmojiFlag' as PlanetMessageType,\n} as const;\n\n/**\n * Owners of planets can post emojis on the planet.\n */\nexport interface EmojiFlagBody {\n  emoji: string;\n}\n\n/**\n * Thinking about future message types.\n */\nexport type PlanetMessageBody = EmojiFlagBody | unknown;\n\n/**\n * We can save these to and retrieve these from the database.\n */\nexport interface PlanetMessage<T extends PlanetMessageBody> {\n  id: string;\n  type: PlanetMessageType;\n  sender: EthAddress;\n  timeCreated: number;\n  planetId: LocationId;\n  body: T;\n}\n\n/**\n * Asks the webserver to get all the the messages posted to some set of planets.\n */\nexport interface PlanetMessageRequest {\n  planets: LocationId[];\n}\n\n/**\n * Contains the answer to the above question.\n */\nexport interface PlanetMessageResponse {\n  [planetId: string /* this is really a LocationId */]: PlanetMessage<unknown>[];\n}\n\n/**\n * Asks the webserver to post an emoji to a particular planet.\n */\nexport interface PostMessageRequest<T extends PlanetMessageBody> {\n  type: PlanetMessageType;\n  locationId: LocationId;\n  body: T;\n}\n\n/**\n * Asks the webserver to delete some messages.\n */\nexport interface DeleteMessagesRequest {\n  locationId: LocationId;\n  ids: string[];\n}\n\n/**\n * A signed message contains some sort of message, as well as its signature and the address that\n * claims to have signed this message.\n */\nexport interface SignedMessage<T> {\n  sender?: EthAddress;\n  signature?: string;\n  message: T;\n}\n","import { mat3, mat4 } from 'gl-matrix';\nimport { HatType } from './hat';\nimport { LocatablePlanet } from './planet';\nimport { Abstract } from './utility';\nimport { Chunk, WorldCoords } from './world';\n\nexport interface PlanetRenderInfo {\n  planet: LocatablePlanet;\n  radii: Radii;\n}\n\nexport interface Radii {\n  radiusWorld: number;\n  radiusPixels: number;\n}\n\nexport interface CanvasCoords {\n  x: number;\n  y: number;\n}\n\nexport interface GameViewport {\n  worldToCanvasCoords(worldCoords: WorldCoords): CanvasCoords;\n  worldToCanvasDist(dist: number): number;\n  canvasToWorldCoords(canvasCoord: CanvasCoords): WorldCoords;\n  scale: number;\n  centerWorldCoords: WorldCoords;\n  viewportWidth: number;\n  viewportHeight: number;\n  intersectsViewport(chunk: Chunk): boolean;\n}\n\nexport type AttribType = Abstract<number, 'AttribType'>;\nexport const AttribType = {\n  Float: 5126 as AttribType, // window.WebGL2RenderingContext && WebGL2RenderingContext['FLOAT'],\n  UByte: 5121 as AttribType, // window.WebGL2RenderingContext && WebGL2RenderingContext['UNSIGNED_BYTE'],\n};\n\nexport type DrawMode = Abstract<number, 'DrawMode'>;\nexport const DrawMode = {\n  Triangles: 4 as DrawMode, // window.WebGL2RenderingContext && WebGL2RenderingContext['TRIANGLES'],\n  Lines: 1 as DrawMode, // window.WebGL2RenderingContext && WebGL2RenderingContext['LINES'],\n  Points: 0 as DrawMode, // window.WebGL2RenderingContext && WebGL2RenderingContext['POINTS'],\n};\n\nexport type AttribProps = {\n  dim: number;\n  type: AttribType; // gl.FLOAT, etc\n  normalize: boolean;\n  name: string;\n};\n\nexport type UniformType = Abstract<number, 'UniformType'>;\nexport const UniformType = {\n  Mat4: 0 as UniformType,\n  Mat3: 1 as UniformType,\n  UByte: 2 as UniformType,\n  Float: 3 as UniformType,\n  Texture: 4 as UniformType,\n  Vec3: 5 as UniformType,\n};\n\nexport type Vec3 = [number, number, number];\n\nexport type UniformJSType = mat4 | mat3 | number | Vec3;\n\nexport type UniformProps = {\n  name: string;\n  type: UniformType;\n};\n\nexport type RGBVec = [number, number, number];\n\nexport type RGBAVec = [number, number, number, number];\n\nexport type Translation = {\n  x: number;\n  y: number;\n};\n\nexport type Scaling = {\n  x: number;\n  y: number;\n};\nexport type HSLVec = readonly [number, number, number];\n\nexport type TextAlign = Abstract<number, 'TextAlign'>;\nexport const TextAlign = {\n  Left: 0 as TextAlign,\n  Center: 0.5 as TextAlign,\n  Right: 1 as TextAlign,\n};\n\nexport type TextAnchor = Abstract<number, 'TextAnchor'>;\nexport const TextAnchor = {\n  Top: 0 as TextAnchor,\n  Middle: 0.5 as TextAnchor,\n  Bottom: 1 as TextAnchor,\n};\n\nexport type RenderZIndex = Abstract<number, 'RenderZIndex'>;\nexport const RenderZIndex = {\n  Background: 0 as RenderZIndex,\n  Voyages: -1 as RenderZIndex,\n  Planets: -10 as RenderZIndex,\n  Text: -11 as RenderZIndex,\n  UI: -12 as RenderZIndex,\n\n  DEFAULT: -98 as RenderZIndex,\n  MAX: -99 as RenderZIndex,\n};\n\nexport type RuinsInfo = {\n  [PlanetLevel: number]: {\n    weights: [number, number, number, number];\n    props: [number, number, number, number];\n  };\n};\n\nexport interface PlanetCosmeticInfo {\n  baseHue: number;\n\n  baseStr: string;\n  bgStr: string;\n\n  baseColor: RGBVec;\n  baseColor2: RGBVec;\n  baseColor3: RGBVec;\n\n  mtnColor: RGBVec;\n  mtnColor2: RGBVec;\n  mtnColor3: RGBVec;\n\n  backgroundColor: RGBVec;\n  previewColor: RGBVec;\n\n  landRgb: RGBVec;\n  oceanRgb: RGBVec;\n  beachRgb: RGBVec;\n\n  asteroidHsl: HSLVec;\n\n  seed: number;\n\n  hatType: HatType;\n\n  spacetime1: RGBVec;\n  spacetime2: RGBVec;\n  spacetime3: RGBVec;\n\n  ruins?: RuinsInfo;\n}\n\nexport type SpaceColorConfiguration = {\n  innerNebulaColor?: string;\n  nebulaColor?: string;\n  spaceColor?: string;\n  deepSpaceColor?: string;\n  deadSpaceColor?: string;\n};\n\nexport interface IRendererConfig {\n  spaceColors: SpaceColorConfiguration;\n}\n","/**\n * @hidden\n */\n\nimport { Abstract } from './utility';\n\n/**\n * The user can choose to have the client automatically choose a gas price for their transactions,\n * depending on how much they are willing to pay and how fast they want their transactions to confirm.\n */\nexport type AutoGasSetting = Abstract<string, 'AutoGasSetting'>;\n\nexport const AutoGasSetting = {\n  Slow: 'Slow' as AutoGasSetting,\n  Average: 'Average' as AutoGasSetting,\n  Fast: 'Fast' as AutoGasSetting,\n};\n\nexport type Setting = Abstract<string, 'Setting'>;\n\n/**\n * Each setting has a unique identifier. Each account gets to store its own local storage setting,\n * per instance of the dark forest contract that it's connected to.\n */\nexport const Setting = {\n  OptOutMetrics: 'OptOutMetrics' as Setting,\n  AutoApproveNonPurchaseTransactions: 'AutoApproveNonPurchaseTransactions' as Setting,\n  DrawChunkBorders: 'DrawChunkBorders' as Setting,\n  HighPerformanceRendering: 'HighPerformanceRendering' as Setting,\n  MoveNotifications: 'MoveNotifications' as Setting,\n  GasFeeGwei: 'GasFeeGwei' as Setting,\n  TerminalVisible: 'TerminalVisible' as Setting,\n  HasAcceptedPluginRisk: 'HasAcceptedPluginRisk' as Setting,\n\n  FoundPirates: 'FoundPirates' as Setting,\n  TutorialCompleted: 'TutorialCompleted' as Setting,\n  FoundSilver: 'FoundSilver' as Setting,\n  FoundSilverBank: 'FoundSilverBank' as Setting,\n  FoundTradingPost: 'FoundTradingPost' as Setting,\n  FoundComet: 'FoundComet' as Setting,\n  FoundArtifact: 'FoundArtifact' as Setting,\n  FoundDeepSpace: 'FoundDeepSpace' as Setting,\n  FoundSpace: 'FoundSpace' as Setting,\n  NewPlayer: 'NewPlayer' as Setting,\n  MiningCores: 'MiningCores' as Setting,\n  TutorialOpen: 'TutorialOpen' as Setting,\n  IsMining: 'IsMining' as Setting,\n  DisableDefaultShortcuts: 'DisableDefaultShortcuts' as Setting,\n  ExperimentalFeatures: 'ExperimentalFeatures' as Setting,\n  DisableEmojiRendering: 'DisableEmojiRendering' as Setting,\n  DisableHatRendering: 'DisableHatRendering' as Setting,\n  AutoClearConfirmedTransactionsAfterSeconds:\n    'AutoClearConfirmedTransactionsAfterSeconds' as Setting,\n  AutoClearRejectedTransactionsAfterSeconds: 'AutoClearRejectedTransactionsAfterSeconds' as Setting,\n  RendererColorInnerNebula: 'RendererColorInnerNebula' as Setting,\n  RendererColorNebula: 'RendererColorNebula' as Setting,\n  RendererColorSpace: 'RendererColorSpace' as Setting,\n  RendererColorDeepSpace: 'RendererColorDeepSpace' as Setting,\n  RendererColorDeadSpace: 'RendererColorDeadSpace' as Setting,\n  DisableFancySpaceEffect: 'DisableFancySpaceEffect' as Setting,\n};\n","import type { Abstract } from './utility';\n\n/**\n * The effects of an upgrade on the stats of a planet. Both upgrades purchased\n * for silver as well as artifacts of certain types can modify stats of a\n * planet.\n */\nexport type Upgrade = {\n  energyCapMultiplier: number;\n  energyGroMultiplier: number;\n  rangeMultiplier: number;\n  speedMultiplier: number;\n  defMultiplier: number;\n};\n\n/**\n * On a single upgrade branch, the stat effects of the four upgrades.\n */\nexport type UpgradeLevels = [Upgrade, Upgrade, Upgrade, Upgrade];\n\n/**\n * Stores the stat effects of upgrades of all three branches: defense, range,\n * speed.\n */\nexport type UpgradeBranches = [UpgradeLevels, UpgradeLevels, UpgradeLevels];\n\n/**\n * How many times a planet has been upgraded along each of the three branches:\n * defense, range, and speed\n */\nexport type UpgradeState = [number, number, number];\n\n/**\n * Abstract type representing an upgrade branch.\n */\nexport type UpgradeBranchName = Abstract<number, 'UpgradeBranchName'>;\n\n/**\n * Enumeration of the three upgrade branches.\n */\nexport const UpgradeBranchName = {\n  Defense: 0 as UpgradeBranchName,\n  Range: 1 as UpgradeBranchName,\n  Speed: 2 as UpgradeBranchName,\n} as const;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n"],"names":["seededRandom","seed","x","Math","sin","floor","SIZE","globalSeed","arr","i","push","idx","rand","sort","a","b","lookup","map","lookupInv","Array","fill","posMod","m","n","sigma","y","fakeHash","planetRarity","r","s","mPrime","nPrime","xPrime","yPrime","val","cyc","hash","append","toString","length","errorConstructor","temp","Error","apply","this","arguments","name","root","BigInt","C_ONE","C_ZERO","C_TEN","C_TWO","C_FIVE","MAX_CYCLE_LEN","P","d","createError","IntermediateInheritor","prototype","DivisionByZero","Fraction","InvalidParameter","assign","e","parse","p1","p2","undefined","isNaN","z","A","B","C","D","N","log10","M","NaN","ndx","v","w","match","gcd","abs","neg","add","sub","mul","div","clone","mod","lcm","inverse","pow","equals","compare","t","ceil","places","Number","round","divisible","valueOf","dec","cycLen","rem","cycleLen","cycOff","len","rem1","rem2","modpow","cycleStart","str","toFraction","excludeWhole","whole","toLatex","toContinued","res","simplify","eps","cont","rec","slice","tmp","error","console","log","mimcHash","modPBigInt","modPBigIntNative","get","getRandomGradientAt","MAX_PERLIN_VALUE","perlin","p","c","FeistelState","constructor","rounds","k","l","inject","elt","mix","lNew","modPow","ret","lesser","mimcWithRounds","key","inputs","nOutputs","state","outputs","mimcSponge","perlinRandHash","vecs","args","remainder","toJSNumber","err","point","scale","randFn","dot","scalarMultiply","getWeight","corner","runningLCM","realMod","dividend","divisor","valueAt","bottomLeftCoords","bottomRightCoords","topLeftCoords","topRightCoords","out","corners","distVec","coords","gradient","perlinValue","options","mirrorY","mirrorX","fractionalP","pValues","oldLCM","ArrivalType","Unknown","Normal","Photoid","Wormhole","ArtifactType","Monolith","Colossus","Spaceship","Pyramid","PlanetaryShield","PhotoidCannon","BloomFilter","BlackDomain","ShipMothership","ShipCrescent","ShipWhale","ShipGear","ShipTitan","ArtifactTypeNames","ArtifactRarity","Common","Rare","Epic","Legendary","Mythic","ArtifactRarityNames","godGrammar","artifact","idNum","parseInt","id","charAt","toUpperCase","SpaceType","NEBULA","SPACE","DEEP_SPACE","DEAD_SPACE","SpaceTypeNames","Biome","UNKNOWN","OCEAN","FOREST","GRASSLAND","TUNDRA","SWAMP","DESERT","ICE","WASTELAND","LAVA","CORRUPTED","BiomeNames","HatType","GraduationCap","PartyHat","Fish","TopHat","Fez","ChefHat","CowboyHat","PopeHat","Squid","SantaHat","ModalName","Help","PlanetDetails","Leaderboard","PlanetDex","UpgradeDetails","TwitterVerify","Broadcast","Hats","Settings","YourArtifacts","ManageArtifacts","Plugins","PluginWarning","PluginEditor","PlanetContextPane","TransactionLog","WithdrawSilver","Diagnostics","ArtifactConversation","ArtifactDetails","MapShare","ManageAccount","Onboarding","Private","CursorState","TargetingExplorer","TargetingForces","ModalManagerEvent","StateChanged","MiningCoordsUpdate","TooltipName","SilverGrowth","SilverCap","Silver","TwitterHandle","Bonus","MinEnergy","Time50","Time90","Pirates","Upgrades","PlanetRank","MaxLevel","FindArtifact","ArtifactStored","SelectedSilver","Rank","Score","MiningPause","MiningTarget","HashesPerSec","CurrentMining","HoverPlanet","SilverProd","TimeUntilActivationPossible","DepositArtifact","DeactivateArtifact","WithdrawArtifact","ActivateArtifact","RetryTransaction","CancelTransaction","PrioritizeTransaction","DefenseMultiplier","EnergyCapMultiplier","EnergyGrowthMultiplier","RangeMultiplier","SpeedMultiplier","BonusEnergyCap","BonusEnergyGro","BonusRange","BonusSpeed","BonusDefense","BonusSpaceJunk","Energy","EnergyGrowth","Range","Speed","Defense","SpaceJunk","Abandon","Clowntown","ArtifactBuff","ModalHelp","ModalPlanetDetails","ModalLeaderboard","ModalPlanetDex","ModalUpgradeDetails","ModalTwitterVerification","ModalTwitterBroadcast","ModalHats","ModalSettings","ModalYourArtifacts","ModalFindArtifact","ModalPlugins","ModalWithdrawSilver","NetworkHealth","WithdrawSilverButton","Invadable","Capturable","Empty","PlanetLevel","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","PlanetLevelNames","PlanetType","PLANET","SILVER_MINE","RUINS","TRADING_POST","SILVER_BANK","PlanetTypeNames","DFAnimation","update","_update","_value","value","super","_state","PlanetMessageType","EmojiFlag","AttribType","Float","UByte","DrawMode","Triangles","Lines","Points","UniformType","Mat4","Mat3","Texture","Vec3","TextAlign","Left","Center","Right","TextAnchor","Top","Middle","Bottom","RenderZIndex","Background","Voyages","Planets","Text","UI","DEFAULT","MAX","AutoGasSetting","Slow","Average","Fast","Setting","OptOutMetrics","AutoApproveNonPurchaseTransactions","DrawChunkBorders","HighPerformanceRendering","MoveNotifications","GasFeeGwei","TerminalVisible","HasAcceptedPluginRisk","FoundPirates","TutorialCompleted","FoundSilver","FoundSilverBank","FoundTradingPost","FoundComet","FoundArtifact","FoundDeepSpace","FoundSpace","NewPlayer","MiningCores","TutorialOpen","IsMining","DisableDefaultShortcuts","ExperimentalFeatures","DisableEmojiRendering","DisableHatRendering","AutoClearConfirmedTransactionsAfterSeconds","AutoClearRejectedTransactionsAfterSeconds","RendererColorInnerNebula","RendererColorNebula","RendererColorSpace","RendererColorDeepSpace","RendererColorDeadSpace","DisableFancySpaceEffect","UpgradeBranchName","BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","Integer","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","sign","isSmall","SmallInteger","NativeBigInt","isPrecise","arrayToSmall","trim","compareAbs","createArray","truncate","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","max","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","quotient","divModAny","self","negate","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mSign","isBasicPrime","isUnit","isEven","isDivisibleBy","millerRabinTest","nPrev","prev","divide","next","bigInt","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","min","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","toBase","left","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","toJSON","minusOne","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports"],"sourceRoot":""}