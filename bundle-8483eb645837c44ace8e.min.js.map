{"version":3,"file":"bundle-8483eb645837c44ace8e.min.js","mappings":"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","sources":["webpack://client/webpack/runtime/chunk loaded","webpack://client/webpack/runtime/startup chunk dependencies","webpack://client/../node_modules/@darkforest_eth/constants/src/index.ts","webpack://client/../node_modules/@darkforest_eth/hexgen/src/index.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/address.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/arrival.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/artifact.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/event.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/index.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/location.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/planet.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/player.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/reveal.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/transactions.ts","webpack://client/../node_modules/@darkforest_eth/serde/src/upgrade.ts","webpack://client/./src/Frontend/Utils/constants.ts","webpack://client/./src/Backend/Miner/permutation.ts","webpack://client/./src/Backend/Miner/miner.worker.ts","webpack://client/webpack/bootstrap","webpack://client/webpack/runtime/ensure chunk","webpack://client/webpack/runtime/get javascript chunk filename","webpack://client/webpack/runtime/hasOwnProperty shorthand","webpack://client/webpack/runtime/node module decorator","webpack://client/webpack/runtime/publicPath","webpack://client/webpack/runtime/importScripts chunk loading","webpack://client/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(495).then(next);\n};","/**\n * This package contains useful constants for use when interacting with\n * the Dark Forest smart contracts within JavaScript or TypeScript.\n *\n * ## Installation\n *\n * You can install this package using [`npm`](https://www.npmjs.com) or\n * [`yarn`](https://classic.yarnpkg.com/lang/en/) by running:\n *\n * ```bash\n * npm install --save @darkforest_eth/constants\n * ```\n * ```bash\n * yarn add @darkforest_eth/constants\n * ```\n *\n * When using this in a plugin, you might want to load it with [skypack](https://www.skypack.dev)\n *\n * ```js\n * import * as constants from 'http://cdn.skypack.dev/@darkforest_eth/constants'\n * ```\n *\n * @packageDocumentation\n */\nimport {\n  ArtifactId,\n  ArtifactRarity,\n  ArtifactType,\n  Biome,\n  EthAddress,\n  GasPrices,\n  LocationId,\n  PlanetLevel,\n} from '@darkforest_eth/types';\nimport bigInt, { BigInteger } from 'big-integer';\n\n/**\n * The precision of Energy & Silver stored in the Dark Forest smart contracts.\n *\n * Energy and Silver are not stored as floats in the smart contracts,\n * so any of those values coming from the contracts need to be divided by `CONTRACT_PRECISION`\n * and any values being sent to the contract need to be multiplied by `CONTRACT_PRECISION`.\n */\nexport const CONTRACT_PRECISION = 1000 as const;\n\n/**\n * By default, the various {@link ContractCaller} will retry a blockchain read this many times.\n */\nexport const DEFAULT_MAX_CALL_RETRIES = 12 as const;\n\n/**\n * The upper-bounds of a LocationID.\n *\n * Represents the maximum possible value that the MiMC hash function (used for IDing locations in the universe) can output.\n * A LocationID must be less than `LOCATION_ID_UB / PLANET_RARITY` in order to be considered a valid planet.\n */\nexport const LOCATION_ID_UB: BigInteger = bigInt(\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617'\n);\n\n/**\n * The 0x0 Ethereum address, which is used for unowned planets, artifacts without an owner, etc.\n */\nexport const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000' as EthAddress;\n\n/**\n * A blank LocationID (all zeros).\n */\nexport const EMPTY_LOCATION_ID =\n  '0000000000000000000000000000000000000000000000000000000000000000' as LocationId;\n\n/**\n * A blank ArtifactID (all zeros).\n */\nexport const EMPTY_ARTIFACT_ID =\n  '0000000000000000000000000000000000000000000000000000000000000000' as ArtifactId;\n\n/**\n * The value of the minimum, valid artifact type\n */\nexport const MIN_ARTIFACT_TYPE = ArtifactType.Monolith;\n/**\n * The value of the maximum, valid artifact type\n */\nexport const MAX_ARTIFACT_TYPE = ArtifactType.ShipTitan;\n\n/**\n * The value of the minimum, valid spaceship type\n */\nexport const MIN_SPACESHIP_TYPE = ArtifactType.ShipMothership;\n/**\n * The value of the maximum, valid spaceship type\n */\nexport const MAX_SPACESHIP_TYPE = ArtifactType.ShipTitan;\n\n/**\n * The value of the minimum, valid artifact rarity\n */\nexport const MIN_ARTIFACT_RARITY = ArtifactRarity.Common;\n/**\n * The value of the maximum, valid artifact rarity\n */\nexport const MAX_ARTIFACT_RARITY = ArtifactRarity.Mythic;\n\n/**\n * The value of the minimum, valid planet level\n */\nexport const MIN_PLANET_LEVEL = PlanetLevel.ZERO;\n/**\n * The value of the maximum, valid planet level\n */\nexport const MAX_PLANET_LEVEL = PlanetLevel.NINE;\n\n/**\n * The value of the minimum, valid biome\n */\nexport const MIN_BIOME = Biome.OCEAN;\n/**\n * The value of the maximum, valid biome\n */\nexport const MAX_BIOME = Biome.CORRUPTED;\n\n/**\n * The URL for xDai's API that returns the gas prices for 35th, 60th, and 90th percentiles of gas prices in the\n * previous 200 blocks. Useful for auto gas price setting.\n *\n * https://www.xdaichain.com/for-developers/developer-resources/gas-price-oracle\n */\nexport const GAS_PRICE_API = 'https://blockscout.com/xdai/mainnet/api/v1/gas-price-oracle' as const;\n\n/**\n * In case we cannot load gas prices from xDai, these are the default auto gas prices.\n */\nexport const DEFAULT_GAS_PRICES: GasPrices = {\n  slow: 1,\n  average: 3,\n  fast: 10,\n} as const;\n\n/**\n * In case xDai's auto-price is something ridiculous, we don't want our players to insta run out of\n * money.\n */\nexport const MAX_AUTO_GAS_PRICE_GWEI = 15 as const;\n\n/**\n * The URL to the block explorer for the chain being used. Prepended to transaction links, etc\n */\n// Careful, don't add a slash to the end of this.\nexport const BLOCK_EXPLORER_URL = 'https://dashboard.tenderly.co/tx/xdai' as const;\n\n/**\n * The amount of time between gas price refreshes when fetching prices from the oracle.\n */\nexport const GAS_PRICES_INTERVAL_MS = 60_000 as const;\n\n/**\n * {@link PlanetContextPane} is this wide, and all the subpanes of that modal also try to stay this\n * size as well.\n */\nexport const RECOMMENDED_MODAL_WIDTH = '400px' as const;\n\n/**\n * The minimum level required for claiming a planet.\n */\nexport const PLANET_CLAIM_MIN_LEVEL = 3 as const;\n\n/**\n * Keys to handle in a special fashion when dealing with key presses\n */\nexport const SpecialKey = {\n  Space: ' ',\n  Tab: 'Tab',\n  Escape: 'Escape',\n  Control: 'Control',\n  Shift: 'Shift',\n} as const;\n\nexport const HAT_SIZES = [\n  'None',\n  'Tiny HAT',\n  'Small HAT',\n  'Medium HAT',\n  'Large HAT',\n  'Huge HAT',\n  'Mega HAT',\n  'Enormous HAT',\n  'Titanic HAT',\n  'Legendary HAT',\n  'Almighty HAT',\n  'Cosmic HAT',\n  'Celestial HAT',\n  'Empyrean HAT',\n  'Ethereal HAT',\n  'Transcendental HAT',\n  'haaaat',\n  'HAAAAT',\n];\n","/**\n * This package contains functions for determining various properties of Dark Forest objects based on their ID in hex. You could think of this package like procedural generation for Ethereum addresses.\n *\n * **Note:** This package _might_ go away when objects become classes that contain a lot of these helpers as instance methods.\n *\n * ## Installation\n *\n * You can install this package using [`npm`](https://www.npmjs.com) or\n * [`yarn`](https://classic.yarnpkg.com/lang/en/) by running:\n *\n * ```bash\n * npm install --save @darkforest_eth/hexgen\n * ```\n * ```bash\n * yarn add @darkforest_eth/hexgen\n * ```\n *\n * When using this in a plugin, you might want to load it with [skypack](https://www.skypack.dev)\n *\n * ```js\n * import * as hexgen from 'http://cdn.skypack.dev/@darkforest_eth/hexgen'\n * ```\n *\n * @packageDocumentation\n */\nimport type { LocationId, Planet, PlanetBonus } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\n\n/**\n * The core method for extracting planet details from a LocationID.\n *\n * @param hexStr LocationID of a planet.\n * @param startByte The first byte to include in the result.\n * @param endByte The byte _after_ the last byte to include in the result.\n */\nexport function getBytesFromHex(hexStr: string, startByte: number, endByte: number) {\n  const byteString = hexStr.substring(2 * startByte, 2 * endByte);\n  return bigInt(`0x${byteString}`);\n}\n\n// This is a cache of bonuses by LocationID to avoid an expensive recalc\nconst bonusById = new Map<LocationId, PlanetBonus>();\n\n/**\n * Extracts the bonuses of a planet given its LocationID.\n *\n * @param hex LocationID of a planet.\n */\nexport function bonusFromHex(hex: LocationId): PlanetBonus {\n  const bonus = bonusById.get(hex);\n  if (bonus) return bonus;\n\n  const newBonus = Array(6).fill(false) as PlanetBonus;\n\n  for (let i = 0; i < newBonus.length; i++) {\n    newBonus[i] = getBytesFromHex(hex, 9 + i, 10 + i).lesser(16);\n  }\n\n  bonusById.set(hex, newBonus);\n  return newBonus;\n}\n\n/**\n * Checks if the LocationID of the planet indicates any bonuses.\n *\n * @param planet Planet to check for bonuses.\n */\nexport function planetHasBonus(planet?: Planet): boolean {\n  if (!planet) return false;\n  return bonusFromHex(planet.locationId).some((bonus) => bonus);\n}\n","import type { EthAddress } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\n\n/**\n * Converts a string to an `EthAddress`: a 0x-prefixed all lowercase hex string\n * of 40 hex characters. An object of the `EthAddress` type should only ever be\n * initialized through this constructor-like method. Throws if the provided\n * string cannot be parsed as an Ethereum address.\n *\n * @param str An address-like `string`\n */\nexport function address(str: string): EthAddress {\n  let ret = str.toLowerCase();\n  if (ret.slice(0, 2) === '0x') {\n    ret = ret.slice(2);\n  }\n  for (const c of ret) {\n    if ('0123456789abcdef'.indexOf(c) === -1) throw new Error('not a valid address');\n  }\n  if (ret.length !== 40) throw new Error('not a valid address');\n  return `0x${ret}` as EthAddress;\n}\n\nexport function hashToInt(hash: string): number {\n  const seed = bigInt(hash, 16).and(0xffffffffff).toString(16);\n  return parseInt('0x' + seed);\n}\n","import { CONTRACT_PRECISION } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { ArrivalType, Awaited, QueuedArrival, VoyageId } from '@darkforest_eth/types';\nimport { address } from './address';\nimport { artifactIdFromEthersBN } from './artifact';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawArrival = Awaited<ReturnType<DarkForest['getPlanetArrival']>>;\n\n/**\n * Converts the raw typechain result of `ArrivalTypes.ArrivalData` struct to\n * to a `QueuedArrival` typescript typed object (see @darkforest_eth/types)\n *\n * @param rawArrival Raw data of a `ArrivalTypes.ArrivalData` struct,\n * returned from a blockchain call (assumed to be typed with typechain).\n */\nexport function decodeArrival(rawArrival: RawArrival): QueuedArrival {\n  const arrival: QueuedArrival = {\n    eventId: rawArrival.id.toString() as VoyageId,\n    player: address(rawArrival.player),\n    fromPlanet: locationIdFromDecStr(rawArrival.fromPlanet.toString()),\n    toPlanet: locationIdFromDecStr(rawArrival.toPlanet.toString()),\n    energyArriving: rawArrival.popArriving.toNumber() / CONTRACT_PRECISION,\n    silverMoved: rawArrival.silverMoved.toNumber() / CONTRACT_PRECISION,\n    departureTime: rawArrival.departureTime.toNumber(),\n    arrivalTime: rawArrival.arrivalTime.toNumber(),\n    distance: rawArrival.distance.toNumber(),\n    artifactId: rawArrival.carriedArtifactId.eq(0)\n      ? undefined\n      : artifactIdFromEthersBN(rawArrival.carriedArtifactId),\n    arrivalType: rawArrival.arrivalType as ArrivalType,\n  };\n\n  return arrival;\n}\n","import type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type {\n  Artifact,\n  ArtifactId,\n  ArtifactPointValues,\n  Awaited,\n  VoyageId,\n} from '@darkforest_eth/types';\nimport { ArtifactRarity, ArtifactType, Biome } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\nimport type { BigNumber as EthersBN } from 'ethers';\nimport { address } from './address';\nimport { locationIdFromDecStr, locationIdFromEthersBN } from './location';\nimport { decodeUpgrade } from './upgrade';\n\n/**\n * Converts a possibly 0x-prefixed string of hex digits to an `ArtifactId`: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). ArtifactIDs should only be instantiated through\n * `artifactIdFromHexStr`, `artifactIdFromDecStr`, and `artifactIdFromEthersBN`.\n *\n * @param artifactId Possibly 0x-prefixed, possibly unpadded hex `string`\n * representation of an artifact's ID.\n */\nexport function artifactIdFromHexStr(artifactId: string): ArtifactId {\n  const artifactIdBI = bigInt(artifactId, 16);\n  let ret = artifactIdBI.toString(16);\n  if (ret.length > 64) throw new Error('not a valid artifact id');\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as ArtifactId;\n}\n\n/**\n * Converts a string representing a decimal number into an ArtifactID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). ArtifactIDs should only be instantiated through\n * `artifactIdFromHexStr`, `artifactIdFromDecStr`, and `artifactIdFromEthersBN`.\n *\n * @param artifactId `string` of decimal digits, the base 10 representation of an\n * artifact ID.\n */\nexport function artifactIdFromDecStr(artifactId: string): ArtifactId {\n  const locationBI = bigInt(artifactId);\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as ArtifactId;\n}\n\n/**\n * Converts a ethers.js BigNumber (type aliased here as EthersBN) representing a\n * decimal number into an ArtifactID: a non-0x-prefixed all lowercase hex string\n * of exactly 64 hex characters (0-padded if necessary). ArtifactIDs should only\n * be instantiated through `artifactIdFromHexStr`, `artifactIdFromDecStr`, and\n * `artifactIdFromEthersBN`.\n *\n * @param artifactId ether.js `BigNumber` representing artifact's ID\n */\nexport function artifactIdFromEthersBN(artifactId: EthersBN): ArtifactId {\n  return artifactIdFromDecStr(artifactId.toString());\n}\n\n/**\n * Converts an ArtifactID to a decimal string with equivalent numerical value;\n * can be used if you need to pass an artifact ID into a web3 call.\n *\n * @param artifactId non-0x-prefixed lowercase hex `string` of 64 hex characters\n * representing an artifact's ID\n */\nexport function artifactIdToDecStr(artifactId: ArtifactId): string {\n  return bigInt(artifactId, 16).toString(10);\n}\n\nexport type RawArtifactPointValues = Awaited<ReturnType<DarkForest['getArtifactPointValues']>>;\n\n/**\n * Converts the raw typechain result of a call to\n * `DarkForest.getArtifactPointValues` to an `ArtifactPointValues`\n * typescript typed object (see @darkforest_eth/types).\n */\nexport function decodeArtifactPointValues(\n  rawPointValues: RawArtifactPointValues\n): ArtifactPointValues {\n  return {\n    [ArtifactRarity.Unknown]: rawPointValues[ArtifactRarity.Unknown].toNumber(),\n    [ArtifactRarity.Common]: rawPointValues[ArtifactRarity.Common].toNumber(),\n    [ArtifactRarity.Rare]: rawPointValues[ArtifactRarity.Rare].toNumber(),\n    [ArtifactRarity.Epic]: rawPointValues[ArtifactRarity.Epic].toNumber(),\n    [ArtifactRarity.Legendary]: rawPointValues[ArtifactRarity.Legendary].toNumber(),\n    [ArtifactRarity.Mythic]: rawPointValues[ArtifactRarity.Mythic].toNumber(),\n  };\n}\n\nexport type RawArtifactWithMetadata = Awaited<ReturnType<DarkForest['getArtifactById']>>;\n\n/**\n * Converts the raw typechain result of `ArtifactTypes.ArtifactWithMetadata`\n * struct to an `Artifact` typescript typed object (see @darkforest_eth/types).\n *\n * @param rawArtifactWithMetadata Raw data of an `ArtifactWithMetadata` struct,\n * returned from a blockchain call (assumed to be typed with typechain).\n */\nexport function decodeArtifact(rawArtifactWithMetadata: RawArtifactWithMetadata): Artifact {\n  const { artifact, owner, upgrade, timeDelayedUpgrade, locationId, voyageId } =\n    rawArtifactWithMetadata;\n\n  return {\n    isInititalized: artifact.isInitialized,\n    id: artifactIdFromEthersBN(artifact.id),\n    planetDiscoveredOn: locationIdFromDecStr(artifact.planetDiscoveredOn.toString()),\n    rarity: artifact.rarity as ArtifactRarity,\n    planetBiome: artifact.planetBiome as Biome,\n    mintedAtTimestamp: artifact.mintedAtTimestamp.toNumber(),\n    discoverer: address(artifact.discoverer),\n    artifactType: artifact.artifactType as ArtifactType,\n    activations: artifact.activations.toNumber(),\n    lastActivated: artifact.lastActivated.toNumber(),\n    lastDeactivated: artifact.lastDeactivated.toNumber(),\n    controller: address(artifact.controller),\n    wormholeTo: artifact.wormholeTo.eq(0) ? undefined : locationIdFromEthersBN(artifact.wormholeTo),\n    currentOwner: address(owner),\n    upgrade: decodeUpgrade(upgrade),\n    timeDelayedUpgrade: decodeUpgrade(timeDelayedUpgrade),\n    onPlanetId: locationId.eq(0) ? undefined : locationIdFromEthersBN(locationId),\n    onVoyageId: voyageId.eq(0) ? undefined : (voyageId.toString() as VoyageId),\n  };\n}\n","import { AutoGasSetting, NetworkEvent } from '@darkforest_eth/types';\n\n/**\n * Returns whether or not the given event is an instance of {@link NetworkEvent}. Not super\n * stringent but works for now.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isNetworkEvent(event: any): event is NetworkEvent {\n  return (\n    typeof event.tx_to === 'string' &&\n    typeof event.tx_type === 'string' &&\n    typeof event.time_exec_called === 'number' &&\n    (event.autoGasPriceSetting === undefined ||\n      Object.values(AutoGasSetting).includes(event.autoGasPriceSetting))\n  );\n}\n","/**\n * This package contains serializers and deserializers for converting between\n * various representations of Dark Forest data, for example between raw data\n * received from blockchain calls to Dark Forest contracts and the typescript\n * types used across the client.\n *\n * ## Installation\n *\n * You can install this package using [`npm`](https://www.npmjs.com) or\n * [`yarn`](https://classic.yarnpkg.com/lang/en/) by running:\n *\n * ```bash\n * npm install --save @darkforest_eth/serde\n * ```\n * ```bash\n * yarn add @darkforest_eth/serde\n * ```\n *\n * When using this in a plugin, you might want to load it with [skypack](https://www.skypack.dev)\n *\n * ```js\n * import * as serde from 'http://cdn.skypack.dev/@darkforest_eth/serde'\n * ```\n *\n * @packageDocumentation\n */\n\nexport * from './address';\nexport * from './arrival';\nexport * from './artifact';\nexport * from './event';\nexport * from './location';\nexport * from './planet';\nexport * from './player';\nexport * from './reveal';\nexport * from './transactions';\nexport * from './upgrade';\n","import { LOCATION_ID_UB } from '@darkforest_eth/constants';\nimport type { LocationId } from '@darkforest_eth/types';\nimport bigInt, { BigInteger } from 'big-integer';\nimport type { BigNumber as EthersBN } from 'ethers';\n\n/**\n * Converts a possibly 0x-prefixed string of hex digits to a `LocationId`: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location A possibly 0x-prefixed `string` of hex digits representing a\n * location ID.\n */\nexport function locationIdFromHexStr(location: string) {\n  const locationBI = bigInt(location, 16);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts a string representing a decimal number into a LocationID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded if necessary). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location `string` of decimal digits, the base 10 representation of a\n * location ID.\n */\nexport function locationIdFromDecStr(location: string) {\n  const locationBI = bigInt(location);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts a BigInteger representation of location ID into a LocationID: a\n * non-0x-prefixed all lowercase hex string of exactly 64 hex characters\n * (0-padded). LocationIDs should only be instantiated through\n * `locationIdFromHexStr`, `locationIdFromDecStr`, `locationIdFromBigInt`, and\n * `locationIdFromEthersBN`.\n *\n * @param location `BigInteger` representation of a location ID.\n */\nexport function locationIdFromBigInt(location: BigInteger): LocationId {\n  const locationBI = bigInt(location);\n  if (locationBI.geq(LOCATION_ID_UB)) throw new Error('not a valid location');\n  let ret = locationBI.toString(16);\n  while (ret.length < 64) ret = '0' + ret;\n  return ret as LocationId;\n}\n\n/**\n * Converts an ethers.js BigNumber (type aliased here as `EthersBN`)\n * representation of a location ID into a LocationID: a non-0x-prefixed all\n * lowercase hex string of exactly 64 hex characters (0-padded). LocationIDs\n * should only be instantiated through `locationIdFromHexStr`,\n * `locationIdFromDecStr`, `locationIdFromBigInt`, and `locationIdFromEthersBN`.\n *\n * @param location ethers.js `BigNumber` representation of a locationID.\n */\nexport function locationIdFromEthersBN(location: EthersBN): LocationId {\n  return locationIdFromDecStr(location.toString());\n}\n\n/**\n * Converts a LocationID to a decimal string with the same numerical value; can\n * be used if you need to pass an artifact ID into a web3 call.\n *\n * @param locationId LocationID to convert into a `string` of decimal digits\n */\nexport function locationIdToDecStr(locationId: LocationId): string {\n  return bigInt(locationId, 16).toString(10);\n}\n","import { CONTRACT_PRECISION } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport { bonusFromHex } from '@darkforest_eth/hexgen';\nimport type {\n  Awaited,\n  Planet,\n  PlanetDefaults,\n  PlanetLevel,\n  PlanetType,\n  SpaceType,\n} from '@darkforest_eth/types';\nimport { address } from './address';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawPlanet = Awaited<ReturnType<DarkForest['planets']>>;\nexport type RawPlanetExtendedInfo = Awaited<ReturnType<DarkForest['planetsExtendedInfo']>>;\nexport type RawPlanetExtendedInfo2 = Awaited<ReturnType<DarkForest['planetsExtendedInfo2']>>;\n\n/**\n * Converts data obtained from a contract call (typed with Typechain) into a\n * `Planet` that can be used by the client (see @darkforest_eth/types). Note\n * that some `Planet` fields (1) store client data that the blockchain is not\n * aware of, such as `unconfirmedDepartures`, (2) store derived data that is\n * calculated later by the client, such as `silverSpent` and `bonus`, or (3)\n * store data which must be added later from the results of additional contract\n * calls, such as `coordsRevealed` and `heldArtifactIds`. Therefore this\n * function may not be very useful to you outside of the specific context of the\n * provided Dark Forest web client.\n *\n * @param rawLocationId string of decimal digits representing a number equal to\n * a planet's ID\n * @param rawPlanet typechain-typed result of a call returning a\n * `PlanetTypes.Planet`\n * @param rawPlanetExtendedInfo typechain-typed result of a call returning a\n * `PlanetTypes.PlanetExtendedInfo`\n * @param rawPlanetExtendedInfo2 typechain-typed result of a call returning a\n * `PlanetTypes.PlanetExtendedInfo2`\n */\nexport function decodePlanet(\n  rawLocationId: string,\n  rawPlanet: RawPlanet,\n  rawPlanetExtendedInfo: RawPlanetExtendedInfo,\n  rawPlanetExtendedInfo2: RawPlanetExtendedInfo2\n): Planet {\n  const locationId = locationIdFromDecStr(rawLocationId.toString());\n\n  const planet: Planet = {\n    locationId: locationId,\n    perlin: rawPlanetExtendedInfo.perlin.toNumber(),\n    spaceType: rawPlanetExtendedInfo.spaceType as SpaceType,\n    owner: address(rawPlanet.owner),\n    hatLevel: rawPlanetExtendedInfo.hatLevel.toNumber(),\n\n    planetLevel: rawPlanet.planetLevel.toNumber() as PlanetLevel,\n    planetType: rawPlanet.planetType as PlanetType,\n    isHomePlanet: rawPlanet.isHomePlanet,\n\n    energyCap: rawPlanet.populationCap.toNumber() / CONTRACT_PRECISION,\n    energyGrowth: rawPlanet.populationGrowth.toNumber() / CONTRACT_PRECISION,\n\n    silverCap: rawPlanet.silverCap.toNumber() / CONTRACT_PRECISION,\n    silverGrowth: rawPlanet.silverGrowth.toNumber() / CONTRACT_PRECISION,\n\n    energy: rawPlanet.population.toNumber() / CONTRACT_PRECISION,\n    silver: rawPlanet.silver.toNumber() / CONTRACT_PRECISION,\n\n    range: rawPlanet.range.toNumber(),\n    speed: rawPlanet.speed.toNumber(),\n    defense: rawPlanet.defense.toNumber(),\n\n    spaceJunk: rawPlanetExtendedInfo.spaceJunk.toNumber(),\n\n    // metadata\n    lastUpdated: rawPlanetExtendedInfo.lastUpdated.toNumber(),\n    upgradeState: [\n      rawPlanetExtendedInfo.upgradeState0.toNumber(),\n      rawPlanetExtendedInfo.upgradeState1.toNumber(),\n      rawPlanetExtendedInfo.upgradeState2.toNumber(),\n    ],\n    unconfirmedClearEmoji: false,\n    unconfirmedAddEmoji: false,\n    loadingServerState: false,\n    needsServerRefresh: true,\n    silverSpent: 0, // this is stale and will be updated in GameObjects\n    coordsRevealed: false, // this is stale and will be updated in GameObjects\n\n    isInContract: true,\n    syncedWithContract: true,\n    hasTriedFindingArtifact: rawPlanetExtendedInfo[9],\n    prospectedBlockNumber: rawPlanetExtendedInfo.prospectedBlockNumber.eq(0)\n      ? undefined\n      : rawPlanetExtendedInfo.prospectedBlockNumber.toNumber(),\n    destroyed: rawPlanetExtendedInfo[11],\n    heldArtifactIds: [], // this is stale and will be updated in GameObjects\n    bonus: bonusFromHex(locationId),\n    pausers: rawPlanetExtendedInfo2.pausers.toNumber(),\n\n    invader: address(rawPlanetExtendedInfo2.invader),\n    capturer: address(rawPlanetExtendedInfo2.capturer),\n    invadeStartBlock: rawPlanetExtendedInfo2.invadeStartBlock.eq(0)\n      ? undefined\n      : rawPlanetExtendedInfo2.invadeStartBlock.toNumber(),\n  };\n\n  return planet;\n}\n\ntype RawDefaults = Awaited<ReturnType<DarkForest['getDefaultStats']>>;\n\n/**\n * Converts the raw typechain result of a call which fetches a\n * `PlanetTypes.PlanetDefaultStats[]` array of structs, and converts it into\n * an object with type `PlanetDefaults` (see @darkforest_eth/types).\n *\n * @param rawDefaults result of a ethers.js contract call which returns a raw\n * `PlanetTypes.PlanetDefaultStats` struct, typed with typechain.\n */\nexport function decodePlanetDefaults(rawDefaults: RawDefaults): PlanetDefaults {\n  return {\n    populationCap: rawDefaults.map((x) => x[1].toNumber() / CONTRACT_PRECISION),\n    populationGrowth: rawDefaults.map((x) => x[2].toNumber() / CONTRACT_PRECISION),\n    range: rawDefaults.map((x) => x[3].toNumber()),\n    speed: rawDefaults.map((x) => x[4].toNumber()),\n    defense: rawDefaults.map((x) => x[5].toNumber()),\n    silverGrowth: rawDefaults.map((x) => x[6].toNumber() / CONTRACT_PRECISION),\n    silverCap: rawDefaults.map((x) => x[7].toNumber() / CONTRACT_PRECISION),\n    barbarianPercentage: rawDefaults.map((x) => x[8].toNumber()),\n  };\n}\n","import type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { Awaited, Player } from '@darkforest_eth/types';\nimport { address } from './address';\nimport { locationIdFromEthersBN } from './location';\n\nexport type RawPlayer = Awaited<ReturnType<DarkForest['players']>>;\n\n/**\n * Converts the raw typechain result of a call which fetches a\n * `PlayerTypes.Player` struct, and converts it into an object\n * with type `Player` (see @darkforest_eth/types) that can be used by a client.\n *\n * @param rawPlayer result of an ethers.js contract call which returns a raw\n * `PlayerTypes.Player` struct, typed with typechain.\n */\nexport function decodePlayer(rawPlayer: RawPlayer): Player {\n  return {\n    address: address(rawPlayer.player),\n    initTimestamp: rawPlayer.initTimestamp.toNumber(),\n    homePlanetId: locationIdFromEthersBN(rawPlayer.homePlanetId),\n    lastRevealTimestamp: rawPlayer.lastRevealTimestamp.toNumber(),\n    lastClaimTimestamp: rawPlayer.lastRevealTimestamp.toNumber(),\n    score: rawPlayer.score.toNumber(),\n    spaceJunk: rawPlayer.spaceJunk.toNumber(),\n    spaceJunkLimit: rawPlayer.spaceJunkLimit.toNumber(),\n    claimedShips: rawPlayer.claimedShips,\n  };\n}\n","import { LOCATION_ID_UB } from '@darkforest_eth/constants';\nimport type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { Awaited, RevealedCoords } from '@darkforest_eth/types';\nimport bigInt from 'big-integer';\nimport { address } from './address';\nimport { locationIdFromDecStr } from './location';\n\nexport type RawRevealedCoords = Awaited<ReturnType<DarkForest['revealedCoords']>>;\n\n/**\n * Converts the result of a typechain-typed ethers.js contract call returning a\n * `RevealTypes.RevealedCoords` struct into a `RevealedCoords` object (see\n * @darkforest_eth/types)\n *\n * @param rawRevealedCoords the result of a typechain-typed ethers.js contract\n * call returning a RevealTypes.RevealedCoords` struct\n */\nexport function decodeRevealedCoords(rawRevealedCoords: RawRevealedCoords): RevealedCoords {\n  const locationId = locationIdFromDecStr(rawRevealedCoords.locationId.toString());\n  let xBI = bigInt(rawRevealedCoords.x.toString()); // nonnegative residue mod p\n  let yBI = bigInt(rawRevealedCoords.y.toString()); // nonnegative residue mod p\n  let x = 0;\n  let y = 0;\n  if (xBI.gt(LOCATION_ID_UB.divide(2))) {\n    xBI = xBI.minus(LOCATION_ID_UB);\n  }\n  x = xBI.toJSNumber();\n  if (yBI.gt(LOCATION_ID_UB.divide(2))) {\n    yBI = yBI.minus(LOCATION_ID_UB);\n  }\n  y = yBI.toJSNumber();\n  return {\n    hash: locationId,\n    x,\n    y,\n    revealer: address(rawRevealedCoords.revealer),\n  };\n}\n","import {\n  ContractMethodName,\n  Transaction,\n  TxIntent,\n  UnconfirmedActivateArtifact,\n  UnconfirmedBuyHat,\n  UnconfirmedCapturePlanet,\n  UnconfirmedDeactivateArtifact,\n  UnconfirmedDepositArtifact,\n  UnconfirmedFindArtifact,\n  UnconfirmedGetShips,\n  UnconfirmedInit,\n  UnconfirmedInvadePlanet,\n  UnconfirmedMove,\n  UnconfirmedPlanetTransfer,\n  UnconfirmedProspectPlanet,\n  UnconfirmedReveal,\n  UnconfirmedUpgrade,\n  UnconfirmedWithdrawArtifact,\n  UnconfirmedWithdrawSilver,\n} from '@darkforest_eth/types';\n\n// @todo:\n// - these `isUnconfirmedX` should be named something that matches the naming convention of the\n//   `TxIntent` subtypes - `isXIntent`\n// - these `isUnconfirmedX` should check something more than the method name\n\nexport function isUnconfirmedReveal(txIntent: TxIntent): txIntent is UnconfirmedReveal {\n  return txIntent.methodName === ContractMethodName.REVEAL_LOCATION;\n}\n\nexport function isUnconfirmedInit(txIntent: TxIntent): txIntent is UnconfirmedInit {\n  return txIntent.methodName === ContractMethodName.INIT;\n}\n\nexport function isUnconfirmedMove(txIntent: TxIntent): txIntent is UnconfirmedMove {\n  return txIntent.methodName === ContractMethodName.MOVE;\n}\n\nexport function isUnconfirmedRelease(txIntent: TxIntent): txIntent is UnconfirmedMove {\n  return isUnconfirmedMove(txIntent) && txIntent.abandoning;\n}\n\nexport function isUnconfirmedUpgrade(txIntent: TxIntent): txIntent is UnconfirmedUpgrade {\n  return txIntent.methodName === ContractMethodName.UPGRADE;\n}\n\nexport function isUnconfirmedBuyHat(txIntent: TxIntent): txIntent is UnconfirmedBuyHat {\n  return txIntent.methodName === ContractMethodName.BUY_HAT;\n}\n\nexport function isUnconfirmedTransfer(txIntent: TxIntent): txIntent is UnconfirmedPlanetTransfer {\n  return txIntent.methodName === ContractMethodName.PLANET_TRANSFER;\n}\n\nexport function isUnconfirmedFindArtifact(txIntent: TxIntent): txIntent is UnconfirmedFindArtifact {\n  return txIntent.methodName === ContractMethodName.FIND_ARTIFACT;\n}\n\nexport function isUnconfirmedDepositArtifact(\n  txIntent: TxIntent\n): txIntent is UnconfirmedDepositArtifact {\n  return txIntent.methodName === ContractMethodName.DEPOSIT_ARTIFACT;\n}\n\nexport function isUnconfirmedWithdrawArtifact(\n  txIntent: TxIntent\n): txIntent is UnconfirmedWithdrawArtifact {\n  return txIntent.methodName === ContractMethodName.WITHDRAW_ARTIFACT;\n}\n\nexport function isUnconfirmedProspectPlanet(\n  txIntent: TxIntent\n): txIntent is UnconfirmedProspectPlanet {\n  return txIntent.methodName === ContractMethodName.PROSPECT_PLANET;\n}\n\nexport function isUnconfirmedActivateArtifact(\n  txIntent: TxIntent\n): txIntent is UnconfirmedActivateArtifact {\n  return txIntent.methodName === ContractMethodName.ACTIVATE_ARTIFACT;\n}\n\nexport function isUnconfirmedDeactivateArtifact(\n  txIntent: TxIntent\n): txIntent is UnconfirmedDeactivateArtifact {\n  return txIntent.methodName === ContractMethodName.DEACTIVATE_ARTIFACT;\n}\n\nexport function isUnconfirmedWithdrawSilver(\n  txIntent: TxIntent\n): txIntent is UnconfirmedWithdrawSilver {\n  return txIntent.methodName === ContractMethodName.WITHDRAW_SILVER;\n}\n\nexport function isUnconfirmedGetShips(txIntent: TxIntent): txIntent is UnconfirmedGetShips {\n  return txIntent.methodName === ContractMethodName.GET_SHIPS;\n}\n\nexport function isUnconfirmedCapturePlanet(\n  txIntent: TxIntent\n): txIntent is UnconfirmedCapturePlanet {\n  return txIntent.methodName === ContractMethodName.CAPTURE_PLANET;\n}\n\nexport function isUnconfirmedInvadePlanet(txIntent: TxIntent): txIntent is UnconfirmedInvadePlanet {\n  return txIntent.methodName === ContractMethodName.INVADE_PLANET;\n}\n\nexport function isUnconfirmedRevealTx(tx: Transaction): tx is Transaction<UnconfirmedReveal> {\n  return isUnconfirmedReveal(tx.intent);\n}\n\nexport function isUnconfirmedInitTx(tx: Transaction): tx is Transaction<UnconfirmedInit> {\n  return isUnconfirmedInit(tx.intent);\n}\n\nexport function isUnconfirmedMoveTx(tx: Transaction): tx is Transaction<UnconfirmedMove> {\n  return isUnconfirmedMove(tx.intent);\n}\n\nexport function isUnconfirmedReleaseTx(tx: Transaction): tx is Transaction<UnconfirmedMove> {\n  return isUnconfirmedRelease(tx.intent);\n}\n\nexport function isUnconfirmedUpgradeTx(tx: Transaction): tx is Transaction<UnconfirmedUpgrade> {\n  return isUnconfirmedUpgrade(tx.intent);\n}\n\nexport function isUnconfirmedBuyHatTx(tx: Transaction): tx is Transaction<UnconfirmedBuyHat> {\n  return isUnconfirmedBuyHat(tx.intent);\n}\n\nexport function isUnconfirmedTransferTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedPlanetTransfer> {\n  return isUnconfirmedTransfer(tx.intent);\n}\n\nexport function isUnconfirmedFindArtifactTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedFindArtifact> {\n  return isUnconfirmedFindArtifact(tx.intent);\n}\n\nexport function isUnconfirmedDepositArtifactTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedDepositArtifact> {\n  return isUnconfirmedDepositArtifact(tx.intent);\n}\n\nexport function isUnconfirmedWithdrawArtifactTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedWithdrawArtifact> {\n  return isUnconfirmedWithdrawArtifact(tx.intent);\n}\n\nexport function isUnconfirmedProspectPlanetTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedProspectPlanet> {\n  return isUnconfirmedProspectPlanet(tx.intent);\n}\n\nexport function isUnconfirmedActivateArtifactTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedActivateArtifact> {\n  return isUnconfirmedActivateArtifact(tx.intent);\n}\n\nexport function isUnconfirmedDeactivateArtifactTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedDeactivateArtifact> {\n  return isUnconfirmedDeactivateArtifact(tx.intent);\n}\n\nexport function isUnconfirmedWithdrawSilverTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedWithdrawSilver> {\n  return isUnconfirmedWithdrawSilver(tx.intent);\n}\n\nexport function isUnconfirmedGetShipsTx(tx: Transaction): tx is Transaction<UnconfirmedGetShips> {\n  return isUnconfirmedGetShips(tx.intent);\n}\n\nexport function isUnconfirmedInvadePlanetTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedInvadePlanet> {\n  return isUnconfirmedInvadePlanet(tx.intent);\n}\n\nexport function isUnconfirmedCapturePlanetTx(\n  tx: Transaction\n): tx is Transaction<UnconfirmedCapturePlanet> {\n  return isUnconfirmedCapturePlanet(tx.intent);\n}\n","import type { DarkForest } from '@darkforest_eth/contracts/typechain';\nimport type { Awaited, Upgrade, UpgradeBranches } from '@darkforest_eth/types';\n\n// Sort of duplicate of RawArtifactWithMetadata to avoid circular dependency\nexport type RawUpgrade = Awaited<ReturnType<DarkForest['getArtifactById']>>['upgrade'];\nexport type RawUpgradesBranches = Awaited<ReturnType<DarkForest['getUpgrades']>>;\n\n/**\n * Converts raw data received from a typechain-typed ethers.js contract call\n * returning a `UpgradeTypes.Upgrade` into an `Upgrade` object (see\n * @darkforest_eth/types)\n *\n * @param rawUpgrade raw data received from a typechain-typed ethers.js contract\n * call returning a `UpgradeTypes.Upgrade`\n */\nexport function decodeUpgrade(rawUpgrade: RawUpgrade): Upgrade {\n  return {\n    energyCapMultiplier: rawUpgrade.popCapMultiplier.toNumber(),\n    energyGroMultiplier: rawUpgrade.popGroMultiplier.toNumber(),\n    rangeMultiplier: rawUpgrade.rangeMultiplier.toNumber(),\n    speedMultiplier: rawUpgrade.speedMultiplier.toNumber(),\n    defMultiplier: rawUpgrade.defMultiplier.toNumber(),\n  };\n}\n\n/**\n * Converts the raw return value of an ether.js contract call to\n * `DarkForest.getUpgrades` to a 2D array of `Upgrade`s.\n *\n * @param rawUpgradeBranches raw return value of ether.js contract call to\n * `DarkForest.getUpgrades`\n */\nexport function decodeUpgradeBranches(rawUpgradeBranches: RawUpgradesBranches): UpgradeBranches {\n  return rawUpgradeBranches.map((a) => a.map(decodeUpgrade)) as UpgradeBranches;\n}\n","import * as bigInt from 'big-integer';\n\n// To developer, increase this number to 256. This, in combination with setting `DISABLE_ZK_CHECKS`\n// in darkforest.toml, will make you mine the map at ULTRA SPEED!\n// To code reviewer, make sure this does not change in a PR to develop!\nconst MIN_CHUNK_SIZE = 16;\n\n/**\n * @tutorial to speed up the game's background rendering code, it is possible to set this value to\n * be a higher power of two. This means that smaller chunks will be merged into larger chunks via\n * the algorithms implemented in {@link ChunkUtils}.\n *\n * {@code Math.floor(Math.pow(2, 16))} should be large enough for most.\n */\nconst MAX_CHUNK_SIZE = 2 ** 14;\n\nconst LOCATION_ID_UB = bigInt(\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617'\n);\n\nexport { MIN_CHUNK_SIZE, MAX_CHUNK_SIZE, LOCATION_ID_UB };\n\nexport const enum DFZIndex {\n  MenuBar = 4,\n  HoverPlanet = 1001,\n  Modal = 1001,\n  Tooltip = 16000000,\n  Notification = 1000,\n}\n","import { fakeHash, perlin, seededRandom } from '@darkforest_eth/hashing';\nimport { locationIdFromBigInt } from '@darkforest_eth/serde';\nimport { Rectangle, WorldCoords, WorldLocation } from '@darkforest_eth/types';\n\ntype IdxWithRand = {\n  idx: number;\n  rand: number;\n};\n\nconst SIZE = 65536; // we permute 256x256 grids of 256x256 mega-chunks\nlet globalSeed = 1;\n\nconst globalRandom = () => {\n  return seededRandom(globalSeed++);\n};\n\nconst arr: IdxWithRand[] = [];\nfor (let i = 0; i < SIZE; i += 1) {\n  arr.push({\n    idx: i,\n    rand: globalRandom(),\n  });\n}\narr.sort((a, b) => a.rand - b.rand);\nconst lookup = arr.map((a) => a.idx);\nconst lookupInv = Array(SIZE).fill(0);\nfor (let i = 0; i < SIZE; i += 1) {\n  lookupInv[lookup[i]] = i;\n}\n\n// return the number in [0, n) congruent to m (mod n)\nconst posMod = (m: number, n: number) => {\n  const val = Math.floor(m / n) * n;\n  return m - val;\n};\n\n// permutation by lookup table\nconst sigma = (x: number, y: number) => {\n  const val = 256 * x + y;\n  const idx = posMod(val, SIZE);\n  const ret: [number, number] = [Math.floor(lookup[idx] / 256), lookup[idx] % 256];\n  return ret;\n};\n\nconst sigmaInv = (x: number, y: number) => {\n  const val = 256 * x + y;\n  const idx = posMod(val, SIZE);\n  const ret: [number, number] = [Math.floor(lookupInv[idx] / 256), lookupInv[idx] % 256];\n  return ret;\n};\n\n// cyclic permutation\nconst cyc = (m: number, n: number) => (r: number, s: number) => {\n  const val = posMod(256 * (r + m) + (s + n), SIZE);\n  const ret: [number, number] = [Math.floor(val / 256), val % 256];\n  return ret;\n};\n\nconst cycInv = (m: number, n: number) => (r: number, s: number) => {\n  return cyc(-m, -n)(r, s);\n};\n\nexport const getPlanetLocations =\n  (\n    spaceTypeKey: number,\n    biomebaseKey: number,\n    perlinLengthScale: number,\n    perlinMirrorX: boolean,\n    perlinMirrorY: boolean\n  ) =>\n  (chunkFootprint: Rectangle, planetRarity: number) => {\n    // assume that the chunkFootprint is entirely contained within a 256x256 grid square\n    const { bottomLeft, sideLength } = chunkFootprint;\n    const { x, y } = bottomLeft;\n    const m = Math.floor(x / 256);\n    const n = Math.floor(y / 256);\n    const [mPrime, nPrime] = sigma(m, n);\n    const postImages: [number, number][] = [];\n    for (let i = 0; i < SIZE / planetRarity; i += 1) {\n      postImages.push([Math.floor(i / 256), i % 256]);\n    }\n    const preImages: [number, number][] = [];\n    for (const postImage of postImages) {\n      preImages.push(sigmaInv(...cycInv(mPrime, nPrime)(...sigmaInv(postImage[0], postImage[1]))));\n    }\n    const coords: WorldCoords[] = preImages.map((preImage) => ({\n      x: m * 256 + preImage[0],\n      y: n * 256 + preImage[1],\n    }));\n\n    const locs: WorldLocation[] = coords\n      .filter(\n        (coords) =>\n          coords.x - bottomLeft.x < sideLength &&\n          coords.x >= bottomLeft.x &&\n          coords.y - bottomLeft.y < sideLength &&\n          coords.y >= bottomLeft.y\n      )\n      .map((coords) => ({\n        coords,\n        hash: locationIdFromBigInt(fakeHash(planetRarity)(coords.x, coords.y)),\n        perlin: perlin(coords, {\n          key: spaceTypeKey,\n          scale: perlinLengthScale,\n          mirrorX: perlinMirrorX,\n          mirrorY: perlinMirrorY,\n          floor: true,\n        }),\n        biomebase: perlin(coords, {\n          key: biomebaseKey,\n          scale: perlinLengthScale,\n          mirrorX: perlinMirrorX,\n          mirrorY: perlinMirrorY,\n          floor: true,\n        }),\n      }));\n\n    return locs;\n  };\n","import { mimcHash, perlin } from '@darkforest_eth/hashing';\nimport { locationIdFromBigInt } from '@darkforest_eth/serde';\nimport { Chunk, PerlinConfig, Rectangle, WorldLocation } from '@darkforest_eth/types';\nimport * as bigInt from 'big-integer';\nimport { BigInteger } from 'big-integer';\nimport { LOCATION_ID_UB } from '../../Frontend/Utils/constants';\nimport { MinerWorkerMessage } from '../../_types/global/GlobalTypes';\nimport { getPlanetLocations } from './permutation';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst ctx: Worker = self as any;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nconst exploreChunk = (\n  chunkFootprint: Rectangle,\n  workerIndex: number,\n  totalWorkers: number,\n  planetRarity: number,\n  jobId: number,\n  useFakeHash: boolean,\n  planetHashKey: number,\n  spaceTypeKey: number,\n  biomebaseKey: number,\n  perlinLengthScale: number,\n  perlinMirrorX: boolean,\n  perlinMirrorY: boolean\n) => {\n  const planetHashFn = mimcHash(planetHashKey);\n  const spaceTypePerlinOpts: PerlinConfig = {\n    key: spaceTypeKey,\n    scale: perlinLengthScale,\n    mirrorX: perlinMirrorX,\n    mirrorY: perlinMirrorY,\n    floor: true,\n  };\n  const biomebasePerlinOpts: PerlinConfig = {\n    key: biomebaseKey,\n    scale: perlinLengthScale,\n    mirrorX: perlinMirrorX,\n    mirrorY: perlinMirrorY,\n    floor: true,\n  };\n\n  let planetLocations: WorldLocation[] = [];\n  if (useFakeHash) {\n    planetLocations =\n      workerIndex > 0\n        ? []\n        : getPlanetLocations(\n            spaceTypeKey,\n            biomebaseKey,\n            perlinLengthScale,\n            perlinMirrorY,\n            perlinMirrorY\n          )(chunkFootprint, planetRarity);\n  } else {\n    const planetRarityBI: BigInteger = bigInt(planetRarity);\n    let count = 0;\n    const { x: bottomLeftX, y: bottomLeftY } = chunkFootprint.bottomLeft;\n    const { sideLength } = chunkFootprint;\n    for (let x = bottomLeftX; x < bottomLeftX + sideLength; x++) {\n      for (let y = bottomLeftY; y < bottomLeftY + sideLength; y++) {\n        if (count % totalWorkers === workerIndex) {\n          const hash: BigInteger = planetHashFn(x, y);\n          if (hash.lesser(LOCATION_ID_UB.divide(planetRarityBI))) {\n            planetLocations.push({\n              coords: { x, y },\n              hash: locationIdFromBigInt(hash),\n              perlin: perlin({ x, y }, spaceTypePerlinOpts),\n              biomebase: perlin({ x, y }, biomebasePerlinOpts),\n            });\n          }\n        }\n        count += 1;\n      }\n    }\n  }\n  const chunkCenter = {\n    x: chunkFootprint.bottomLeft.x + chunkFootprint.sideLength / 2,\n    y: chunkFootprint.bottomLeft.y + chunkFootprint.sideLength / 2,\n  };\n  const chunkData: Chunk = {\n    chunkFootprint,\n    planetLocations,\n    perlin: perlin(chunkCenter, { ...spaceTypePerlinOpts, floor: false }),\n  };\n  ctx.postMessage(JSON.stringify([chunkData, jobId]));\n};\n\nctx.addEventListener('message', (e: MessageEvent) => {\n  const exploreMessage: MinerWorkerMessage = JSON.parse(e.data) as MinerWorkerMessage;\n\n  exploreChunk(\n    exploreMessage.chunkFootprint,\n    exploreMessage.workerIndex,\n    exploreMessage.totalWorkers,\n    exploreMessage.planetRarity,\n    exploreMessage.jobId,\n    exploreMessage.useMockHash,\n    exploreMessage.planetHashKey,\n    exploreMessage.spaceTypeKey,\n    exploreMessage.biomebaseKey,\n    exploreMessage.perlinLengthScale,\n    exploreMessage.perlinMirrorX,\n    exploreMessage.perlinMirrorY\n  );\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [495], function() { return __webpack_require__(9513); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"bundle-\" + \"37d99c2bb4a5fc7a01d5\" + \".min.js\";\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t513: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkclient\"] = self[\"webpackChunkclient\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","CONTRACT_PRECISION","DEFAULT_MAX_CALL_RETRIES","LOCATION_ID_UB","EMPTY_ADDRESS","EMPTY_LOCATION_ID","EMPTY_ARTIFACT_ID","MIN_ARTIFACT_TYPE","ArtifactType","Monolith","MAX_ARTIFACT_TYPE","ShipTitan","MIN_SPACESHIP_TYPE","ShipMothership","MAX_SPACESHIP_TYPE","MIN_ARTIFACT_RARITY","ArtifactRarity","Common","MAX_ARTIFACT_RARITY","Mythic","MIN_PLANET_LEVEL","PlanetLevel","ZERO","MAX_PLANET_LEVEL","NINE","MIN_BIOME","Biome","OCEAN","MAX_BIOME","CORRUPTED","GAS_PRICE_API","DEFAULT_GAS_PRICES","slow","average","fast","MAX_AUTO_GAS_PRICE_GWEI","BLOCK_EXPLORER_URL","GAS_PRICES_INTERVAL_MS","RECOMMENDED_MODAL_WIDTH","PLANET_CLAIM_MIN_LEVEL","SpecialKey","Space","Tab","Escape","Control","Shift","HAT_SIZES","getBytesFromHex","hexStr","startByte","endByte","byteString","substring","bonusById","Map","bonusFromHex","hex","bonus","get","newBonus","Array","fill","i","length","lesser","set","planet","locationId","some","str","ret","toLowerCase","slice","c","indexOf","Error","hash","seed","and","toString","parseInt","rawArrival","eventId","id","player","address","fromPlanet","locationIdFromDecStr","toPlanet","energyArriving","popArriving","toNumber","silverMoved","departureTime","arrivalTime","distance","artifactId","carriedArtifactId","eq","undefined","artifactIdFromEthersBN","arrivalType","artifactIdFromDecStr","rawPointValues","Unknown","Rare","Epic","Legendary","rawArtifactWithMetadata","artifact","owner","upgrade","timeDelayedUpgrade","voyageId","isInititalized","isInitialized","planetDiscoveredOn","rarity","planetBiome","mintedAtTimestamp","discoverer","artifactType","activations","lastActivated","lastDeactivated","controller","wormholeTo","locationIdFromEthersBN","currentOwner","decodeUpgrade","onPlanetId","onVoyageId","event","tx_to","tx_type","time_exec_called","autoGasPriceSetting","Object","values","AutoGasSetting","includes","location","locationBI","geq","rawLocationId","rawPlanet","rawPlanetExtendedInfo","rawPlanetExtendedInfo2","perlin","spaceType","hatLevel","planetLevel","planetType","isHomePlanet","energyCap","populationCap","energyGrowth","populationGrowth","silverCap","silverGrowth","energy","population","silver","range","speed","defense","spaceJunk","lastUpdated","upgradeState","upgradeState0","upgradeState1","upgradeState2","unconfirmedClearEmoji","unconfirmedAddEmoji","loadingServerState","needsServerRefresh","silverSpent","coordsRevealed","isInContract","syncedWithContract","hasTriedFindingArtifact","prospectedBlockNumber","destroyed","heldArtifactIds","pausers","invader","capturer","invadeStartBlock","rawDefaults","map","x","barbarianPercentage","rawPlayer","initTimestamp","homePlanetId","lastRevealTimestamp","lastClaimTimestamp","score","spaceJunkLimit","claimedShips","rawRevealedCoords","xBI","yBI","y","gt","divide","minus","toJSNumber","revealer","isUnconfirmedReveal","txIntent","methodName","isUnconfirmedInit","isUnconfirmedMove","isUnconfirmedRelease","abandoning","isUnconfirmedUpgrade","isUnconfirmedBuyHat","isUnconfirmedTransfer","isUnconfirmedFindArtifact","isUnconfirmedDepositArtifact","isUnconfirmedWithdrawArtifact","isUnconfirmedProspectPlanet","isUnconfirmedActivateArtifact","isUnconfirmedDeactivateArtifact","isUnconfirmedWithdrawSilver","isUnconfirmedGetShips","isUnconfirmedCapturePlanet","isUnconfirmedInvadePlanet","tx","intent","rawUpgrade","energyCapMultiplier","popCapMultiplier","energyGroMultiplier","popGroMultiplier","rangeMultiplier","speedMultiplier","defMultiplier","rawUpgradeBranches","a","SIZE","globalSeed","arr","push","idx","rand","seededRandom","sort","b","lookup","lookupInv","posMod","m","n","Math","floor","sigmaInv","cycInv","r","s","val","cyc","ctx","self","addEventListener","e","exploreMessage","JSON","parse","data","chunkFootprint","workerIndex","totalWorkers","planetRarity","jobId","useFakeHash","planetHashKey","spaceTypeKey","biomebaseKey","perlinLengthScale","perlinMirrorX","perlinMirrorY","planetHashFn","mimcHash","spaceTypePerlinOpts","key","scale","mirrorX","mirrorY","biomebasePerlinOpts","planetLocations","bottomLeft","sideLength","mPrime","nPrime","sigma","postImages","preImages","postImage","preImage","filter","coords","locationIdFromBigInt","fakeHash","biomebase","getPlanetLocations","planetRarityBI","count","bottomLeftX","bottomLeftY","chunkCenter","chunkData","postMessage","stringify","exploreChunk","useMockHash","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","__webpack_exports__","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","f","chunkId","Promise","all","reduce","promises","u","o","obj","prop","prototype","hasOwnProperty","nmd","paths","children","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","then"],"sourceRoot":""}